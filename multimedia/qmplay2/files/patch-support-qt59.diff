diff --git a/CMakeLists.txt b/CMakeLists.txt
index db4c1ea129a4f179b47d60fc934203ec3e7f7102..66809ffeb9ae5e9b7628f61b43c24d66b1411042 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -43,7 +43,7 @@ else()
     find_package(DummyPkgConfig REQUIRED)
 endif()
 
-find_package(Qt5Widgets 5.10 REQUIRED)
+find_package(Qt5Widgets 5.9.8 REQUIRED)
 
 pkg_check_modules(LIBAVFORMAT REQUIRED libavformat>=58.12.100)
 pkg_check_modules(LIBAVCODEC REQUIRED libavcodec>=58.18.100)
diff --git a/src/qmplay2/YouTubeDL.cpp b/src/qmplay2/YouTubeDL.cpp
index 5de2b8fcc44aa5c3202f98cff0bbe15e1b9f14d0..f0876164b0ea962b9a184d8c20aeeaf849fde8ba 100644
--- a/src/qmplay2/YouTubeDL.cpp
+++ b/src/qmplay2/YouTubeDL.cpp
@@ -234,11 +234,19 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
                 const QString url = result.at(i - 1);
 
                 const QJsonDocument json = QJsonDocument::fromJson(result.at(i).toUtf8());
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
                 for (const QJsonValue &formats : json["formats"].toArray())
                 {
                     if (url == formats["url"].toString())
                         QMPlay2Core.addCookies(url, formats["http_headers"]["Cookie"].toString().toUtf8());
                 }
+#else
+                for (const QJsonValue &formats : json.object()["formats"].toArray())
+                {
+                    if (url == formats.toObject()["url"].toString())
+                        QMPlay2Core.addCookies(url, formats.toObject()["http_headers"].toObject()["Cookie"].toString().toUtf8());
+                }
+#endif
 
                 result.removeAt(i);
             }
diff --git a/src/modules/Extensions/MediaBrowser.cpp b/src/modules/Extensions/MediaBrowser.cpp
index 2be196d61cb20f64fe87bae11241053eb4b433d4..1e06a33195fdadf7f1fef4ff8fce2db27f3f6981 100644
--- a/src/modules/Extensions/MediaBrowser.cpp
+++ b/src/modules/Extensions/MediaBrowser.cpp
@@ -582,8 +582,13 @@ void MediaBrowser::downloadScripts(const QByteArray &jsonData)
     }();
 
     bool removed = false, downloading = false;
-    for (auto &&jsonVal : jsonArr)
+    for (auto &&jVal : jsonArr)
     {
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
+        const auto jsonVal = jVal;
+#else
+        const auto jsonVal = jVal.toObject();
+#endif
         const auto name = jsonVal["Name"].toString();
         const auto path = jsonVal["Path"].toString();
         const auto version = jsonVal["Version"].toInt();
diff --git a/src/modules/Extensions/Radio.cpp b/src/modules/Extensions/Radio.cpp
index 54a52faaa34af7bf8c60626642dd515d72ec9175..2e33b641b9381fd1d852db2344f60b922b439ed0 100644
--- a/src/modules/Extensions/Radio.cpp
+++ b/src/modules/Extensions/Radio.cpp
@@ -184,7 +184,11 @@ void Radio::replyFinished(NetworkReply *reply)
                     if (!data.isObject())
                         continue;
 
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
                     const auto name = data["name"].toString();
+#else
+                    const auto name = data.toObject()["name"].toString();
+#endif
                     if (name.trimmed().isEmpty())
                         continue;
 
diff --git a/src/modules/Extensions/Radio/RadioBrowserModel.cpp b/src/modules/Extensions/Radio/RadioBrowserModel.cpp
index 4fc515119fab4f00e75e95ccd56c203b69850fef..807f767a5c29091d3df84cc31a45e37f5ac05c00 100644
--- a/src/modules/Extensions/Radio/RadioBrowserModel.cpp
+++ b/src/modules/Extensions/Radio/RadioBrowserModel.cpp
@@ -306,10 +306,15 @@ void RadioBrowserModel::replyFinished(NetworkReply *reply)
 
                 const QPixmap radioIcon = QIcon(":/radio.svgz").pixmap(elementHeight(), elementHeight());
 
-                for (auto &&item : arrayItems)
+                for (auto &&itm : arrayItems)
                 {
-                    if (!item.isObject())
+                    if (!itm.isObject())
                         continue;
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
+                    const auto item = itm;
+#else
+                    const auto item = itm.toObject();
+#endif
 
                     QString streamInfo = item["codec"].toString();
                     if (!streamInfo.isEmpty())
diff --git a/src/modules/Extensions/YouTube.cpp b/src/modules/Extensions/YouTube.cpp
index 2bece48ed2f6028d7940714b6e94f0e18462059d..ec073c8ae0791adc0b443c76b433542a714b367b 100644
--- a/src/modules/Extensions/YouTube.cpp
+++ b/src/modules/Extensions/YouTube.cpp
@@ -784,16 +784,24 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation)
         ;
         for (auto &&val : onResponseReceivedCommands)
         {
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
             items = val
                 ["appendContinuationItemsAction"]
                 ["continuationItems"].toArray()
             ;
+#else
+            items = val.toObject()
+                ["appendContinuationItemsAction"].toObject()
+                ["continuationItems"].toArray()
+            ;
+#endif
             if (!items.isEmpty())
                 break;
         }
     }
     else
     {
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
         items = jsonObj
             ["contents"]
             ["twoColumnSearchResultsRenderer"]
@@ -801,10 +809,24 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation)
             ["sectionListRenderer"]
             ["contents"].toArray()
         ;
+#else
+        items = jsonObj
+            ["contents"].toObject()
+            ["twoColumnSearchResultsRenderer"].toObject()
+            ["primaryContents"].toObject()
+            ["sectionListRenderer"].toObject()
+            ["contents"].toArray()
+        ;
+#endif
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
     for (const QJsonValue &obj : items)
+#else
+    for (auto &&obj : items)
+#endif
     {
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
         const auto contents = obj
             ["itemSectionRenderer"]
             ["contents"].toArray()
@@ -816,13 +838,31 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation)
             ["continuationCommand"]
             ["token"].toString()
         ;
+#else
+        const auto contents = obj.toObject()
+            ["itemSectionRenderer"].toObject()
+            ["contents"].toArray()
+        ;
+
+        const auto token = obj.toObject()
+            ["continuationItemRenderer"].toObject()
+            ["continuationEndpoint"].toObject()
+            ["continuationCommand"].toObject()
+            ["token"].toString()
+        ;
+#endif
         if (!token.isEmpty())
             m_continuationToken = token;
 
         for (auto &&obj : contents)
         {
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
             const auto videoRenderer = obj["videoRenderer"].toObject();
             const auto playlistRenderer = obj["playlistRenderer"].toObject();
+#else
+            const auto videoRenderer = obj.toObject()["videoRenderer"].toObject();
+            const auto playlistRenderer = obj.toObject()["playlistRenderer"].toObject();
+#endif
 
             const bool isVideo = !videoRenderer.isEmpty() && playlistRenderer.isEmpty();
 
@@ -830,26 +870,43 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation)
 
             if (isVideo)
             {
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
                 title = videoRenderer["title"]["runs"].toArray().at(0)["text"].toString();
+#else
+                title = videoRenderer["title"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
+#endif
                 contentId = videoRenderer["videoId"].toString();
                 if (title.isEmpty() || contentId.isEmpty())
                     continue;
 
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
                 length = videoRenderer["lengthText"]["simpleText"].toString();
                 user = videoRenderer["ownerText"]["runs"].toArray().at(0)["text"].toString();
                 publishTime = videoRenderer["publishedTimeText"]["simpleText"].toString();
                 viewCount = videoRenderer["shortViewCountText"]["simpleText"].toString();
                 thumbnail = videoRenderer["thumbnail"]["thumbnails"].toArray().at(0)["url"].toString();
+#else
+                length = videoRenderer["lengthText"].toObject()["simpleText"].toString();
+                user = videoRenderer["ownerText"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
+                publishTime = videoRenderer["publishedTimeText"].toObject()["simpleText"].toString();
+                viewCount = videoRenderer["shortViewCountText"].toObject()["simpleText"].toString();
+                thumbnail = videoRenderer["thumbnail"].toObject()["thumbnails"].toArray().at(0).toObject()["url"].toString();
+#endif
 
                 url = YOUTUBE_URL "/watch?v=" + contentId;
             }
             else
             {
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
                 title = playlistRenderer["title"]["simpleText"].toString();
+#else
+                title = playlistRenderer["title"].toObject()["simpleText"].toString();
+#endif
                 contentId = playlistRenderer["playlistId"].toString();
                 if (title.isEmpty() || contentId.isEmpty())
                     continue;
 
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
                 user = playlistRenderer["longBylineText"]["runs"].toArray().at(0)["text"].toString();
                 thumbnail = playlistRenderer
                     ["thumbnailRenderer"]
@@ -858,6 +915,16 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation)
                     ["thumbnails"].toArray().at(0)
                     ["url"].toString()
                 ;
+#else
+                user = playlistRenderer["longBylineText"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
+                thumbnail = playlistRenderer
+                    ["thumbnailRenderer"].toObject()
+                    ["playlistVideoThumbnailRenderer"].toObject()
+                    ["thumbnail"].toObject()
+                    ["thumbnails"].toArray().at(0).toObject()
+                    ["url"].toString()
+                 ;
+#endif
 
                 url = YOUTUBE_URL "/playlist?list=" + contentId;
             }
@@ -1085,6 +1152,7 @@ void YouTube::preparePlaylist(const QByteArray &data, QTreeWidgetItem *tWI)
 {
     QStringList playlist;
 
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
     const auto contents = getYtInitialData(data)
         ["contents"]
         ["twoColumnBrowseResultsRenderer"]
@@ -1098,11 +1166,33 @@ void YouTube::preparePlaylist(const QByteArray &data, QTreeWidgetItem *tWI)
         ["playlistVideoListRenderer"]
         ["contents"].toArray()
     ;
+#else
+    const auto json = getYtInitialData(data);
+
+    const auto contents = json.object()
+        ["contents"].toObject()
+        ["twoColumnBrowseResultsRenderer"].toObject()
+        ["tabs"].toArray().at(0).toObject()
+        ["tabRenderer"].toObject()
+        ["content"].toObject()
+        ["sectionListRenderer"].toObject()
+        ["contents"].toArray().at(0).toObject()
+        ["itemSectionRenderer"].toObject()
+        ["contents"].toArray().at(0).toObject()
+        ["playlistVideoListRenderer"].toObject()
+    ;
+#endif
 
     for (auto &&obj : contents)
     {
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
         const auto title = obj["playlistVideoRenderer"]["title"]["runs"].toArray().at(0)["text"].toString();
         const auto videoId = obj["playlistVideoRenderer"]["videoId"].toString();
+#else
+        const auto playlistRenderer = obj.toObject()["playlistVideoRenderer"].toObject();
+        const auto title = playlistRenderer["title"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
+        const auto videoId = playlistRenderer["videoId"].toString();
+#endif
         if (title.isEmpty() || videoId.isEmpty())
             continue;
 
