diff --git build/cmake/options.cmake build/cmake/options.cmake
index b7703811ac..a8c922c740 100644
--- build/cmake/options.cmake
+++ build/cmake/options.cmake
@@ -411,6 +411,9 @@ if(WIN32)
     wx_option(wxUSE_WINRT "enable WinRT support" ${wxUSE_WINRT_DEFAULT})
     wx_option(wxUSE_ACCESSIBILITY "enable accessibility support")
 endif()
+if(APPLE)
+    wx_option(wxUSE_ACCESSIBILITY "enable accessibility support" ON)
+endif()
 
 # this one is not really MSW-specific but it exists mainly to be turned off
 # under MSW, it should be off by default on the other platforms
diff --git include/wx/chkconf.h include/wx/chkconf.h
index 82bb132b8a..8811e8c299 100644
--- include/wx/chkconf.h
+++ include/wx/chkconf.h
@@ -1511,9 +1511,9 @@
  */
 #if wxUSE_GUI
 
-#if wxUSE_ACCESSIBILITY && !defined(__WXMSW__)
+#if wxUSE_ACCESSIBILITY && !( defined(__WXMSW__) || defined(__WXOSX_COCOA__) || defined(__APPLE__))
 #   ifdef wxABORT_ON_CONFIG_ERROR
-#       error "wxUSE_ACCESSIBILITY is currently only supported under wxMSW"
+#       error "wxUSE_ACCESSIBILITY is currently only supported under wxMSW or Cocoa"
 #   else
 #       undef wxUSE_ACCESSIBILITY
 #       define wxUSE_ACCESSIBILITY 0
diff --git setup.h.in setup.h.in
index b33699b9c9..a64244ec6e 100644
--- setup.h.in
+++ setup.h.in
@@ -557,8 +557,8 @@
 
 #define wxUSE_DRAG_AND_DROP 0
 
-#ifdef __WXMSW__
-#define wxUSE_ACCESSIBILITY 0
+#if (defined (__WXMSW__) || defined(__WXOSX_COCOA__))
+#define wxUSE_ACCESSIBILITY 1
 #else
 #define wxUSE_ACCESSIBILITY 0
 #endif
diff --git include/wx/msw/setup0.h include/wx/msw/setup0.h
index 7b502ecbef..1cc27ceb20 100644
--- include/wx/msw/setup0.h
+++ include/wx/msw/setup0.h
@@ -87,11 +87,12 @@
 // NDEBUG) or, on the contrary, enable more asserts, including the usually
 // disabled ones, in the debug build (then do it inside #ifndef NDEBUG)
 //
-// #ifdef NDEBUG
-//  #define wxDEBUG_LEVEL 0
-// #else
-//  #define wxDEBUG_LEVEL 2
-// #endif
+// Uncommented for Audacity, and set to 1 (rather than 2) for debug builds.
+#ifdef NDEBUG
+  #define wxDEBUG_LEVEL 0
+#else
+  #define wxDEBUG_LEVEL 1
+#endif
 
 // wxHandleFatalExceptions() may be used to catch the program faults at run
 // time and, instead of terminating the program with a usual GPF message box,
@@ -1419,14 +1420,8 @@
 // Use wxAccessible for enhanced and customisable accessibility.
 // Depends on wxUSE_OLE on MSW.
 //
-// Default is 1 on MSW, 0 elsewhere.
-//
-// Recommended setting (at present): 1 (MSW-only)
-#ifdef __WXMSW__
+// Set to 1 for Audacity
 #define wxUSE_ACCESSIBILITY 1
-#else
-#define wxUSE_ACCESSIBILITY 0
-#endif
 
 // ----------------------------------------------------------------------------
 // miscellaneous settings

diff --git include/wx/access.h include/wx/access.h
index 49489692094483fabbb2016ca8ab858d057cd097..fef2dd59d63ba93fa9bc5e2d6a080f6ae8e4253f 100644
--- include/wx/access.h
+++ include/wx/access.h
@@ -371,6 +371,19 @@ private:
     #include "wx/msw/ole/access.h"
 #endif
 
+#if defined(__WXMAC__)
+
+class WXDLLIMPEXP_CORE wxAccessible : public wxAccessibleBase
+{
+public:
+   wxAccessible(wxWindow *win = NULL) : wxAccessibleBase(win) {}
+   virtual ~wxAccessible() {}
+
+   static void NotifyEvent(int eventType, wxWindow* window, wxAccObject objectType, int objectId);
+};
+
+#endif
+
 #endif // wxUSE_ACCESSIBILITY
 
 #endif // _WX_ACCESSBASE_H_
diff --git include/wx/osx/dvrenderers.h include/wx/osx/dvrenderers.h
index 1b8231eebf..37a193eea2 100644
--- include/wx/osx/dvrenderers.h
+++ include/wx/osx/dvrenderers.h
@@ -87,6 +87,9 @@ public:
     virtual void OSXOnCellChanged(NSObject *value,
                                   const wxDataViewItem& item,
                                   unsigned col) wxOVERRIDE;
+#if wxUSE_ACCESSIBILITY
+      virtual wxString GetAccessibleDescription() const wxOVERRIDE { return {}; }
+#endif // wxUSE_ACCESSIBILITY
 
 private:
 #if wxUSE_MARKUP && wxOSX_USE_COCOA
@@ -112,6 +115,10 @@ public:
 
     virtual bool MacRender() wxOVERRIDE;
 
+#if wxUSE_ACCESSIBILITY
+   virtual wxString GetAccessibleDescription() const wxOVERRIDE { return {}; }
+#endif // wxUSE_ACCESSIBILITY
+
 private:
     wxDECLARE_DYNAMIC_CLASS_NO_COPY(wxDataViewBitmapRenderer);
 };
@@ -137,6 +144,10 @@ public:
                                   const wxDataViewItem& item,
                                   unsigned col) wxOVERRIDE;
 
+#if wxUSE_ACCESSIBILITY
+   virtual wxString GetAccessibleDescription() const wxOVERRIDE { return {}; }
+#endif // wxUSE_ACCESSIBILITY
+
 private:
     wxArrayString m_choices;
 
@@ -160,6 +171,10 @@ public:
     virtual void OSXOnCellChanged(NSObject *value,
                                   const wxDataViewItem& item,
                                   unsigned col) wxOVERRIDE;
+
+#if wxUSE_ACCESSIBILITY
+   virtual wxString GetAccessibleDescription() const wxOVERRIDE { return {}; }
+#endif // wxUSE_ACCESSIBILITY
 };
 
 // ---------------------------------------------------------
@@ -180,6 +195,10 @@ public:
                                   const wxDataViewItem& item,
                                   unsigned col) wxOVERRIDE;
 
+#if wxUSE_ACCESSIBILITY
+   virtual wxString GetAccessibleDescription() const wxOVERRIDE { return {}; }
+#endif // wxUSE_ACCESSIBILITY
+
 private:
     wxDECLARE_DYNAMIC_CLASS_NO_COPY(wxDataViewIconTextRenderer);
 };
@@ -206,6 +225,10 @@ public:
                                   const wxDataViewItem& item,
                                   unsigned col) wxOVERRIDE;
 
+#if wxUSE_ACCESSIBILITY
+   virtual wxString GetAccessibleDescription() const wxOVERRIDE { return {}; }
+#endif // wxUSE_ACCESSIBILITY
+
 private:
     void DoInitButtonCell(int buttonType);
 
@@ -231,7 +254,9 @@ public:
     virtual void OSXOnCellChanged(NSObject *value,
                                   const wxDataViewItem& item,
                                   unsigned col) wxOVERRIDE;
-
+#if wxUSE_ACCESSIBILITY
+   virtual wxString GetAccessibleDescription() const wxOVERRIDE { return {}; }
+#endif // wxUSE_ACCESSIBILITY
 private:
     wxDECLARE_DYNAMIC_CLASS_NO_COPY(wxDataViewProgressRenderer);
 };
@@ -255,6 +280,10 @@ public:
                                   const wxDataViewItem& item,
                                   unsigned col) wxOVERRIDE;
 
+#if wxUSE_ACCESSIBILITY
+   virtual wxString GetAccessibleDescription() const wxOVERRIDE { return {}; }
+#endif // wxUSE_ACCESSIBILITY
+
 private:
     wxDECLARE_DYNAMIC_CLASS_NO_COPY(wxDataViewDateRenderer);
 };
diff --git src/osx/cocoa/window.mm src/osx/cocoa/window.mm
index 6f570d531ec30f51d84fe94ac3aeaf2b4cce340e..70daeab50d3d75b4acca8bd38905419cf26a795a 100644
--- src/osx/cocoa/window.mm
+++ src/osx/cocoa/window.mm
@@ -3876,3 +3876,170 @@ wxWidgetImpl* wxWidgetImpl::CreateContentView( wxNonOwnedWindow* now )
     }
     return c;
 }
+
+// RJVB : a minimal implementation of missing wxAccessible, taken from the Audacity patches.
+namespace {
+   id GetUIElement
+   (wxAccessible &accessible, int childID = wxACC_SELF,
+    wxAccessible *pChild = NULL)
+   {
+      if (pChild)
+         return pChild->GetWindow()->GetPeer()->GetWXWidget();
+      else
+         return nil;
+//          [wxAccessibilityChild accessibilityChildWithAccessible: &accessible
+//                                                       andNumber: childID];
+   }
+}
+
+// static
+void wxAccessible::NotifyEvent
+(int eventType, wxWindow* window, wxAccObject objectType, int objectId)
+{
+   enum { maxNotifications = 6 };
+   NSString *notifications[maxNotifications];
+   for(unsigned ii = 0; ii < maxNotifications; ++ii)
+      notifications[ii] = NULL;
+
+   NSString *& notification = notifications[0];
+   NSString *& notification2 = notifications[1];
+
+   switch (eventType)
+   {
+      case wxACC_EVENT_SYSTEM_MOVESIZEEND:
+         notification = NSAccessibilityWindowResizedNotification;
+         break;
+
+      case wxACC_EVENT_SYSTEM_MINIMIZEEND:
+         notification = NSAccessibilityWindowMiniaturizedNotification;
+         break;
+
+      case wxACC_EVENT_OBJECT_CREATE:
+         notification = NSAccessibilityCreatedNotification;
+         break;
+
+      case wxACC_EVENT_OBJECT_DESTROY:
+         notification = NSAccessibilityUIElementDestroyedNotification;
+         break;
+
+      case wxACC_EVENT_OBJECT_NAMECHANGE:
+         notification = NSAccessibilityTitleChangedNotification;
+         break;
+
+      case wxACC_EVENT_OBJECT_VALUECHANGE:
+         notification = NSAccessibilityValueChangedNotification;
+         break;
+
+      case wxACC_EVENT_OBJECT_LOCATIONCHANGE:
+         notification = NSAccessibilityMovedNotification;
+         notification2 = NSAccessibilityResizedNotification;
+         break;
+
+      case wxACC_EVENT_SYSTEM_DRAGDROPEND:
+         // Not sure if this is right...
+         if (objectType == wxOBJID_WINDOW)
+            notification = NSAccessibilityWindowMovedNotification;
+         else
+            notification = NSAccessibilityMovedNotification;
+         break;
+
+      case wxACC_EVENT_OBJECT_FOCUS:
+         // Not sure if this is right...
+         if (objectType == wxOBJID_WINDOW)
+            notification = NSAccessibilityFocusedWindowChangedNotification;
+         else
+            notification = NSAccessibilityFocusedUIElementChangedNotification;
+         break;
+
+         // Selection notifications... quite a mismatch between the
+         // wxWidgets interface and the NS interface.  Just make lots
+         // of notifications to cover the possibilities.
+      case wxACC_EVENT_OBJECT_SELECTION:
+      case wxACC_EVENT_OBJECT_SELECTIONADD:
+      case wxACC_EVENT_OBJECT_SELECTIONREMOVE:
+      case wxACC_EVENT_OBJECT_SELECTIONWITHIN:
+         notifications[0] = NSAccessibilitySelectedTextChangedNotification;
+         notifications[1] = NSAccessibilitySelectedChildrenChangedNotification;
+         notifications[2] = NSAccessibilitySelectedRowsChangedNotification;
+         notifications[3] = NSAccessibilitySelectedColumnsChangedNotification;
+         notifications[4] = NSAccessibilitySelectedCellsChangedNotification;
+         // notifications[5] = NSAccessibilitySelectedChildrenMovedNotification;
+         break;
+
+      case wxACC_EVENT_OBJECT_REORDER:
+      case wxACC_EVENT_SYSTEM_SCROLLINGEND:
+         notification = NSAccessibilitySelectedChildrenMovedNotification;
+         // maybe?
+         break;
+
+      case wxACC_EVENT_OBJECT_STATECHANGE:
+      case wxACC_EVENT_OBJECT_DESCRIPTIONCHANGE:
+      case wxACC_EVENT_OBJECT_PARENTCHANGE:
+      case wxACC_EVENT_OBJECT_HELPCHANGE:
+      case wxACC_EVENT_OBJECT_DEFACTIONCHANGE:
+      case wxACC_EVENT_OBJECT_ACCELERATORCHANGE:
+         if (objectType == wxOBJID_CLIENT)
+         {
+            notification = NSAccessibilitySelectedChildrenChangedNotification;
+            // maybe?
+            break;
+         }
+         else
+            return;
+
+      case wxACC_EVENT_SYSTEM_SOUND:
+      case wxACC_EVENT_SYSTEM_ALERT:
+      case wxACC_EVENT_SYSTEM_FOREGROUND:
+      case wxACC_EVENT_SYSTEM_MENUSTART:
+      case wxACC_EVENT_SYSTEM_MENUEND:
+      case wxACC_EVENT_SYSTEM_MENUPOPUPSTART:
+      case wxACC_EVENT_SYSTEM_MENUPOPUPEND:
+      case wxACC_EVENT_SYSTEM_CAPTURESTART:
+      case wxACC_EVENT_SYSTEM_CAPTUREEND:
+      case wxACC_EVENT_SYSTEM_MOVESIZESTART:
+
+      case wxACC_EVENT_SYSTEM_CONTEXTHELPSTART:
+      case wxACC_EVENT_SYSTEM_CONTEXTHELPEND:
+      case wxACC_EVENT_SYSTEM_DRAGDROPSTART:
+
+      case wxACC_EVENT_SYSTEM_DIALOGSTART:
+      case wxACC_EVENT_SYSTEM_DIALOGEND:
+      case wxACC_EVENT_SYSTEM_SCROLLINGSTART:
+
+      case wxACC_EVENT_SYSTEM_SWITCHSTART:
+      case wxACC_EVENT_SYSTEM_SWITCHEND:
+      case wxACC_EVENT_SYSTEM_MINIMIZESTART:
+
+      case wxACC_EVENT_OBJECT_SHOW:
+      case wxACC_EVENT_OBJECT_HIDE:
+
+      default:
+         // no equivalents
+      return;
+   }
+
+   id element = nil;
+   if (objectType == wxOBJID_CLIENT)
+   {
+      wxAccessible *pAccessible = window->GetAccessible();
+      if (!pAccessible)
+         return;
+
+      wxAccessible *child = NULL;
+      wxAccStatus status = pAccessible->GetChild(objectId, &child);
+      element = GetUIElement(*pAccessible, objectId, child);
+   }
+   else
+      element = window->GetPeer()->GetWXWidget();
+
+   if (!element)
+      return;
+
+   for(unsigned ii = 0; ii < maxNotifications; ++ii)
+   {
+      NSString *notification = notifications[ii];
+      if (!notification)
+         break;
+      NSAccessibilityPostNotification(element, notification);
+   }
+}
