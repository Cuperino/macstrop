# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem      1.0
PortGroup       boost 1.0

PortGroup       LTO 1.0
PortGroup       preserve_runtime_libraries 1.0

# for now, clamp us on 1.71 to avoid hairy issues with my old port:boost+preserve_runtime_libraries
# if ever we are obliged to upgrade, manual copies can be made of the 1.71 libraries (possibly
# adding port:boost171 as a build dependency)
boost.version   1.71
version         ${boost.version}
name            boost
epoch           1

license         Boost-1
categories      devel
platforms       darwin
maintainers     {michaelld @michaelld} \
                {@mascguy} \
                openmaintainer

description     Collection of portable C++ source libraries

long_description \
    Boost provides free portable peer-reviewed C++ \
    libraries. The emphasis is on portable libraries \
    which work well with the C++ Standard Library.

homepage        http://www.boost.org

distfiles
use_configure   no
build           {}

subport ${name}-numpy {
    description           Boost.Numpy library
    long_description      {*}${description}
    depends_lib           port:${name}
    boost.require_numpy   yes
}

long_description {*}${long_description} \
    This port is just a shim port, installing symbolic \
    links to the include area and libraries provided \
    by the [boost::depends_portname] port.

destroot {
    # Sym link to boost include dir.
    # Only need to do this for primary boost port
    if { ${subport} eq ${name} } {
        xinstall -d ${destroot}${prefix}/include
        ln -s [boost::include_dir]/boost ${destroot}${prefix}/include
    }
    # Sym link libraries
    xinstall -d ${destroot}${prefix}/lib
    if {${os.platform} eq "darwin"} {
        set shext "dylib"
    } else {
        set shext "so"
    }
    # symlink only the linker interface and static libraries
    foreach lib [glob -directory [boost::lib_dir] *.${shext} *.a] {
        # Skip numpy lib if present for main boost port
        if { ${subport} ne ${name} || ![string match *numpy* $lib] } {
            # TODO: on Mac, generate the versioned file name if +preserve_runtime_libraries
            set plib ${prefix}/lib/[file tail ${lib}]
            # check if the potential symlink file already exists and belongs to another port;
            # if it belongs to a previous version of ourselves we can evidently replace it!
            # (fport will be 0 if the file doesn't belong to a port)
            set fport [registry_file_registered ${plib}]
            if {![file exists ${plib}] || ${fport} eq "${subport}" || ${fport} eq "0"} {
                ln -s ${lib} ${destroot}${prefix}/lib/
            }
        }
    }
    # Readme explaining this port
    set readme  ${destroot}${prefix}/share/doc/${subport}/README
    xinstall -d [file dirname ${readme}]
    set f [open ${readme} "w"]
    puts  ${f} ${long_description}
    close ${f}
}

post-destroot {
    if {${os.platform} eq "darwin"} {
        if {[variant_exists preserve_runtime_libraries] && [variant_isset preserve_runtime_libraries]} {
            ui_debug "## Creating Darwin/POSIX versioned versions of libboost*.dylib as libboost*.${version}.dylib"
            foreach f [glob -nocomplain ${destroot}${prefix}/lib/libboost*.dylib] {
                set l [file tail ${f}]
                set n [file rootname ${l}]
                set nn ${n}.${version}.0.dylib
                ui_debug "### ${n} -> ${nn}"
                set newfn "${prefix}/lib/${nn}"
                ln -s ${n}.dylib ${destroot}${newfn}
            }
            # we cannot use the normal preserve_libraries macro because it is not wired
            # to handle the particular situation we're dealing with here...
            # We simply make a verbatim copy of the current prevdir.
            set prevdir ${prefix}/lib/${preserve_runtime_library_dir}
            system "ditto -V --rsrc ${prevdir} ${destroot}${prevdir}"
            # these are the only two links actually pointing into ${prevdir}:
            ln -s -f ${preserve_runtime_library_dir}/libboost_python-mt.dylib ${destroot}${prefix}/lib/libboost_python-mt.dylib
            ln -s -f ${preserve_runtime_library_dir}/libboost_signals-mt.dylib ${destroot}${prefix}/lib/libboost_signals-mt.dylib
            # no need to make the preserved libraries interdependent among
            # each other because ${prevdir} was copied unaltered (no call to update_preserved_libraries).
        }
    } else {
        preserve_libraries ${prefix}/lib "libboost*.so.*"
    }
}

# shims for the relevant variants that affect the dylibs built (plus no_static)
set pythons_suffixes {27 35 36 37 38 39}
set pythons_ports {}
foreach s ${pythons_suffixes} {
    lappend pythons_ports python${s}
}
foreach s ${pythons_suffixes} {
    set p python${s}
    set v [string index ${s} 0].[string index ${s} 1]
    set i [lsearch -exact ${pythons_ports} ${p}]
    set c [lreplace ${pythons_ports} ${i} ${i}]
    variant ${p} description "Build Boost.Python for Python ${v}" conflicts {*}${c} debug {}
}

variant debug description {Builds debug versions of the libraries as well} {}

variant no_static description {Disable building static libraries} {}

variant no_single description {Disable building single-threaded libraries} {}

default_variants +no_single +no_static

livecheck.type  none
