diff --git kstyle/demo/main.cpp kstyle/demo/main.cpp
index b75731fa..e1102aa4 100644
--- kstyle/demo/main.cpp
+++ kstyle/demo/main.cpp
@@ -54,6 +54,7 @@ namespace Oxygen
 
         app.setAttribute( Qt::AA_UseHighDpiPixmaps, commandLine.isSet( enableHighDpi ) );
         #endif
+        app.setAttribute(Qt::AA_DontUseNativeMenuBar);
 
         app.setApplicationName( i18n( "Oxygen Demo" ) );
         app.setWindowIcon( QIcon::fromTheme( QStringLiteral( "oxygen" ) ) );
diff --git kstyle/demo/oxygendemodialog.cpp kstyle/demo/oxygendemodialog.cpp
index 528173b1..e69bf78b 100644
--- kstyle/demo/oxygendemodialog.cpp
+++ kstyle/demo/oxygendemodialog.cpp
@@ -84,7 +84,11 @@ namespace Oxygen
         buttonBox->addButton( _enableCheckBox, QDialogButtonBox::ResetRole );
 
         _rightToLeftCheckBox = new QCheckBox( i18n( "Right to left layout" ) );
+        _rightToLeftCheckBox->setChecked( qApp->isRightToLeft() );
         connect( _rightToLeftCheckBox, SIGNAL(toggled(bool)), SLOT(toggleRightToLeft(bool)) );
+#if QT_VERSION >= 0x050400
+        connect( qApp, SIGNAL(layoutDirectionChanged(Qt::LayoutDirection)), SLOT(layoutDirectionChanged(Qt::LayoutDirection)) );
+#endif
         buttonBox->addButton( _rightToLeftCheckBox, QDialogButtonBox::ResetRole );
 
         #ifdef HAVE_SCHEME_CHOOSER
@@ -165,9 +169,9 @@ namespace Oxygen
         // mdi
         {
             page = new KPageWidgetItem( new MdiDemoWidget() );
-            page->setName( i18n( "MDI Windows" ) );
+            page->setName( i18n( "MDI Windows & Menus" ) );
             setPageIcon( page, QStringLiteral( "preferences-system-windows" ) );
-            page->setHeader( i18n( "Shows the appearance of MDI windows" ) );
+            page->setHeader( i18n( "Shows the appearance of MDI windows and menus" ) );
             addPage( page );
             items.append( page );
         }
@@ -241,6 +245,10 @@ namespace Oxygen
     void DemoDialog::toggleRightToLeft( bool value )
     { qApp->setLayoutDirection( value ? Qt::RightToLeft:Qt::LeftToRight ); }
 
+    //_______________________________________________________________
+    void DemoDialog::layoutDirectionChanged( Qt::LayoutDirection direction )
+    { _rightToLeftCheckBox->setChecked( direction == Qt::RightToLeft ); }
+
     //_______________________________________________________________
     void DemoDialog::closeEvent( QCloseEvent* event )
     {
diff --git kstyle/demo/oxygendemodialog.h kstyle/demo/oxygendemodialog.h
index 4b8bd4ab..006c9d8f 100644
--- kstyle/demo/oxygendemodialog.h
+++ kstyle/demo/oxygendemodialog.h
@@ -80,6 +80,7 @@ namespace Oxygen
 
         //* toggle RightToLeft
         void toggleRightToLeft( bool );
+        virtual void layoutDirectionChanged( Qt::LayoutDirection );
 
         private:
 
diff --git kstyle/demo/oxygenmdidemowidget.cpp kstyle/demo/oxygenmdidemowidget.cpp
index 014a0c3d..c46ead63 100644
--- kstyle/demo/oxygenmdidemowidget.cpp
+++ kstyle/demo/oxygenmdidemowidget.cpp
@@ -30,6 +30,9 @@
 #include <QMenuBar>
 #include <QMenu>
 #include <QIcon>
+#if QT_VERSION >= 0x050000
+#include <QGuiApplication>
+#endif
 
 namespace Oxygen
 {
@@ -45,6 +48,8 @@ namespace Oxygen
         layout()->setContentsMargins(0, 0, 0, 0);
 #endif
         QMenuBar* menuBar = new QMenuBar( this );
+        // let the menubar appear in the MDI window on all platforms
+        menuBar->setNativeMenuBar( false );
         layout()->addWidget( menuBar );
 
         QWidget* widget = new QWidget( this );
@@ -52,12 +57,35 @@ namespace Oxygen
         ui.setupUi( widget );
 
         QMenu* menu = menuBar->addMenu( i18n( "Layout" ) );
-        connect( menu->addAction( i18n( "Tile" ) ), SIGNAL(triggered()), this, SLOT(setLayoutTiled()) );
-        connect( menu->addAction( i18n( "Cascade" ) ), SIGNAL(triggered()), this, SLOT(setLayoutCascade()) );
-        connect( menu->addAction( i18n( "Tabs" ) ), SIGNAL(triggered()), this, SLOT(setLayoutTabbed()) );
+        QAction *action;
+#if QT_VERSION < 0x050000
+        action = new QAction( i18n( "Exclusive actions" ), this );
+        action->setSeparator(true);
+        menu->addAction( action );
+        menuBar->addMenu( menu );
+#else
+        menu->addSection( i18n( "Exclusive actions" ) );
+#endif
+        QActionGroup *aGroup = new QActionGroup( menu );
+        action = menu->addAction( i18n( "Tile" ) );
+        action->setCheckable( true );
+        aGroup->addAction( action );
+        connect( action, SIGNAL(triggered()), this, SLOT(setLayoutTiled()) );
+        action = menu->addAction( i18n( "Cascade" ) );
+        action->setCheckable( true );
+        aGroup->addAction( action );
+        connect( action, SIGNAL(triggered()), this, SLOT(setLayoutCascade()) );
+        action = menu->addAction( i18n( "Tabs" ) );
+        action->setCheckable( true );
+        aGroup->addAction( action );
+        connect( action, SIGNAL(triggered()), this, SLOT(setLayoutTabbed()) );
+
+        menu->addSeparator();
+
+        action = menu->addAction( i18n( "<- Check here" ) );
+        action->setCheckable( true );
 
         menu = menuBar->addMenu( i18n( "Tools" ) );
-        QAction* action;
         connect( action = menu->addAction( QIcon::fromTheme( QStringLiteral( "arrow-right" ) ), i18n( "Select Next Window" ) ), SIGNAL(triggered()), ui.mdiArea, SLOT(activateNextSubWindow()) );
         action->setShortcut( Qt::CTRL + Qt::Key_Tab );
         addAction( action );
@@ -66,6 +94,55 @@ namespace Oxygen
         action->setShortcut( Qt::CTRL + Qt::SHIFT + Qt::Key_Tab );
         addAction( action );
 
+#ifdef Q_OS_MACOS
+        // duplicate the MDI menubar in the native menubar
+#if QT_VERSION >= 0x050000
+        if (!QGuiApplication::platformName().contains(QLatin1String("cocoa")))
+#endif
+        {
+            QMenuBar* menuBar = new QMenuBar( 0 );
+            // make a global menubar
+            menuBar->setNativeMenuBar( true );
+
+            QMenu* menu = menuBar->addMenu( i18n( "Layout" ) );
+            QAction *action;
+#if QT_VERSION < 0x050000
+            action = new QAction( i18n( "Exclusive actions" ), this );
+            action->setSeparator(true);
+            menu->addAction( action );
+            menuBar->addMenu( menu );
+#else
+            menu->addSection( i18n( "Exclusive actions" ) );
+#endif
+            QActionGroup *aGroup = new QActionGroup( menu );
+            action = menu->addAction( i18n( "Tile" ) );
+            action->setCheckable( true );
+            aGroup->addAction( action );
+            connect( action, SIGNAL(triggered()), this, SLOT(setLayoutTiled()) );
+            action = menu->addAction( i18n( "Cascade" ) );
+            action->setCheckable( true );
+            aGroup->addAction( action );
+            connect( action, SIGNAL(triggered()), this, SLOT(setLayoutCascade()) );
+            action = menu->addAction( i18n( "Tabs" ) );
+            action->setCheckable( true );
+            aGroup->addAction( action );
+            connect( action, SIGNAL(triggered()), this, SLOT(setLayoutTabbed()) );
+
+            menu->addSeparator();
+
+            action = menu->addAction( i18n( "<- Check here" ) );
+            action->setCheckable( true );
+
+            menu = menuBar->addMenu( i18n( "Tools" ) );
+            connect( action = menu->addAction( QIcon::fromTheme( QStringLiteral( "arrow-right" ) ), i18n( "Select Next Window" ) ), SIGNAL(triggered()), ui.mdiArea, SLOT(activateNextSubWindow()) );
+            action->setShortcut( Qt::CTRL + Qt::Key_Tab );
+            addAction( action );
+
+            connect( action = menu->addAction( QIcon::fromTheme( QStringLiteral( "arrow-left" ) ), i18n( "Select Previous Window" ) ), SIGNAL(triggered()), ui.mdiArea, SLOT(activatePreviousSubWindow()) );
+            action->setShortcut( Qt::CTRL + Qt::SHIFT + Qt::Key_Tab );
+            addAction( action );
+        }
+#endif //Q_OS_MACOS
     }
 
     //______________________________________________________________
