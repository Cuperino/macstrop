diff --git a/CMakeLists.txt b/CMakeLists.txt
index 57e04973a202a7badb312756da342d8284d9f3e9..c90acde825240ebb892551ba62501030f62e7ce2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,8 +9,8 @@ project(kio-extras VERSION ${RELEASE_SERVICE_VERSION})
 
 include(FeatureSummary)
 
-set(QT_MIN_VERSION "5.11.0")
-set(KF5_MIN_VERSION "5.66.0")
+set(QT_MIN_VERSION "5.9.8")
+set(KF5_MIN_VERSION "5.60.0")
 find_package(Qt5 ${QT_MIN_VERSION} CONFIG REQUIRED COMPONENTS DBus Network Widgets Svg)
 
 find_package(Qt5Test ${QT_MIN_VERSION} CONFIG QUIET)
diff --git a/nfs/nfsv2.cpp b/nfs/nfsv2.cpp
index 63b922d3a515fd24b1608e15df77e451e22d9feb..6d94b899484020d3336bb5b3c396604f384c2c8b 100644
--- a/nfs/nfsv2.cpp
+++ b/nfs/nfsv2.cpp
@@ -862,7 +862,11 @@ void NFSProtocolV2::copySame(const QUrl& src, const QUrl& dest, int _mode, KIO::
     const QString partFilePath = destPath + QLatin1String(".part");
     const NFSFileHandle partFH = getFileHandle(partFilePath);
     const bool bPartExists = !partFH.isInvalid();
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     const bool bMarkPartial = m_slave->configValue(QStringLiteral("MarkPartial"), true);
+#else
+    const bool bMarkPartial = m_slave->config()->readEntry("MarkPartial", true);
+#endif
 
     if (bPartExists) {
         int rpcStatus;
@@ -992,7 +996,11 @@ void NFSProtocolV2::copySame(const QUrl& src, const QUrl& dest, int _mode, KIO::
     if (error) {
         if (bMarkPartial) {
             // Remove the part file if it's smaller than the minimum keep size.
-            const unsigned int size = m_slave->configValue(QStringLiteral("MinimumKeepSize"), DEFAULT_MINIMUM_KEEP_SIZE);
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
+            const int size = m_slave->configValue(QStringLiteral("MinimumKeepSize"), DEFAULT_MINIMUM_KEEP_SIZE);
+#else
+            const int size = m_slave->config()->readEntry("MinimumKeepSize", DEFAULT_MINIMUM_KEEP_SIZE);
+#endif
             if (writeArgs.offset <  size) {
                 if (!remove(partFilePath)) {
                     qCDebug(LOG_KIO_NFS) << "Could not remove part file, ignoring...";
@@ -1077,7 +1085,11 @@ void NFSProtocolV2::copyFrom(const QUrl& src, const QUrl& dest, int _mode, KIO::
     bool bResume = false;
     const QFileInfo partInfo(destPath + QLatin1String(".part"));
     const bool bPartExists = partInfo.exists();
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     const bool bMarkPartial = m_slave->configValue(QStringLiteral("MarkPartial"), true);
+#else
+    const bool bMarkPartial = m_slave->config()->readEntry("MarkPartial", true);
+#endif
 
     if (bMarkPartial && bPartExists && partInfo.size() > 0) {
         if (partInfo.isDir()) {
@@ -1195,7 +1207,11 @@ void NFSProtocolV2::copyFrom(const QUrl& src, const QUrl& dest, int _mode, KIO::
     if (error) {
         if (bMarkPartial) {
             // Remove the part file if it's smaller than the minimum keep
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
             const int size = m_slave->configValue(QStringLiteral("MinimumKeepSize"), DEFAULT_MINIMUM_KEEP_SIZE);
+#else
+            const int size = m_slave->config()->readEntry("MinimumKeepSize", DEFAULT_MINIMUM_KEEP_SIZE);
+#endif
             if (partInfo.size() <  size) {
                 QFile::remove(partInfo.absoluteFilePath());
             }
@@ -1277,7 +1293,11 @@ void NFSProtocolV2::copyTo(const QUrl& src, const QUrl& dest, int _mode, KIO::Jo
     const QString partFilePath = destPath + QLatin1String(".part");
     const NFSFileHandle partFH = getFileHandle(partFilePath);
     const bool bPartExists = !partFH.isInvalid();
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     const bool bMarkPartial = m_slave->configValue(QStringLiteral("MarkPartial"), true);
+#else
+    const bool bMarkPartial = m_slave->config()->readEntry("MarkPartial", true);
+#endif
 
     if (bPartExists) {
         int rpcStatus;
@@ -1392,7 +1412,11 @@ void NFSProtocolV2::copyTo(const QUrl& src, const QUrl& dest, int _mode, KIO::Jo
     if (error) {
         if (bMarkPartial) {
             // Remove the part file if it's smaller than the minimum keep size.
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
             const unsigned int size = m_slave->configValue(QStringLiteral("MinimumKeepSize"), DEFAULT_MINIMUM_KEEP_SIZE);
+#else
+            const unsigned int size = m_slave->config()->readEntry("MinimumKeepSize", DEFAULT_MINIMUM_KEEP_SIZE);
+#endif
             if (writeArgs.offset <  size) {
                 if (!remove(partFilePath)) {
                     qCDebug(LOG_KIO_NFS) << "Could not remove part file, ignoring...";
diff --git a/nfs/nfsv3.cpp b/nfs/nfsv3.cpp
index 6ab0c15b7e121da1ca7e2b37ca4c6aeb5daffdb0..bab3d4e5892c2c7c159bc99c3296e0dfad96d172 100644
--- a/nfs/nfsv3.cpp
+++ b/nfs/nfsv3.cpp
@@ -1107,7 +1107,11 @@ void NFSProtocolV3::copySame(const QUrl& src, const QUrl& dest, int _mode, KIO::
     const QString partFilePath = destPath + QLatin1String(".part");
     const NFSFileHandle partFH = getFileHandle(partFilePath);
     const bool bPartExists = !partFH.isInvalid();
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     const bool bMarkPartial = m_slave->configValue(QStringLiteral("MarkPartial"), true);
+#else
+    const bool bMarkPartial = m_slave->config()->readEntry("MarkPartial", true);
+#endif
 
     if (bPartExists) {
         int rpcStatus;
@@ -1241,7 +1245,11 @@ void NFSProtocolV3::copySame(const QUrl& src, const QUrl& dest, int _mode, KIO::
     if (error) {
         if (bMarkPartial) {
             // Remove the part file if it's smaller than the minimum keep size.
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
             const unsigned int size = m_slave->configValue(QStringLiteral("MinimumKeepSize"), DEFAULT_MINIMUM_KEEP_SIZE);
+#else
+            const unsigned int size = m_slave->config()->readEntry("MinimumKeepSize", DEFAULT_MINIMUM_KEEP_SIZE);
+#endif
             if (writeArgs.offset <  size) {
                 if (!remove(partFilePath)) {
                     qCDebug(LOG_KIO_NFS) << "Could not remove part file, ignoring...";
@@ -1333,7 +1341,11 @@ void NFSProtocolV3::copyFrom(const QUrl& src, const QUrl& dest, int _mode, KIO::
     bool bResume = false;
     const QFileInfo partInfo(destPath + QLatin1String(".part"));
     const bool bPartExists = partInfo.exists();
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     const bool bMarkPartial = m_slave->configValue(QStringLiteral("MarkPartial"), true);
+#else
+    const bool bMarkPartial = m_slave->config()->readEntry("MarkPartial", true);
+#endif
 
     if (bMarkPartial && bPartExists && partInfo.size() > 0) {
         if (partInfo.isDir()) {
@@ -1451,7 +1463,11 @@ void NFSProtocolV3::copyFrom(const QUrl& src, const QUrl& dest, int _mode, KIO::
     if (error) {
         if (bMarkPartial) {
             // Remove the part file if it's smaller than the minimum keep
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
             const int size = m_slave->configValue(QStringLiteral("MinimumKeepSize"), DEFAULT_MINIMUM_KEEP_SIZE);
+#else
+            const int size = m_slave->config()->readEntry("MinimumKeepSize", DEFAULT_MINIMUM_KEEP_SIZE);
+#endif
             if (partInfo.size() <  size) {
                 QFile::remove(partInfo.absoluteFilePath());
             }
@@ -1531,7 +1547,11 @@ void NFSProtocolV3::copyTo(const QUrl& src, const QUrl& dest, int _mode, KIO::Jo
     const QString partFilePath = destPath + QLatin1String(".part");
     const NFSFileHandle partFH = getFileHandle(partFilePath);
     const bool bPartExists = !partFH.isInvalid();
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     const bool bMarkPartial = m_slave->configValue(QStringLiteral("MarkPartial"), true);
+#else
+    const bool bMarkPartial = m_slave->config()->readEntry("MarkPartial", true);
+#endif
 
     if (bPartExists) {
         int rpcStatus;
@@ -1653,7 +1673,11 @@ void NFSProtocolV3::copyTo(const QUrl& src, const QUrl& dest, int _mode, KIO::Jo
     if (error) {
         if (bMarkPartial) {
             // Remove the part file if it's smaller than the minimum keep size.
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
             const unsigned int size = m_slave->configValue(QStringLiteral("MinimumKeepSize"), DEFAULT_MINIMUM_KEEP_SIZE);
+#else
+            const unsigned int size = m_slave->config()->readEntry("MinimumKeepSize", DEFAULT_MINIMUM_KEEP_SIZE);
+#endif
             if (writeArgs.offset <  size) {
                 if (!remove(partFilePath)) {
                     qCDebug(LOG_KIO_NFS) << "Could not remove part file, ignoring...";
diff --git a/smb/autotests/smburltest.cpp b/smb/autotests/smburltest.cpp
index c417cc9aaa2ce2b3dececf18cd5a0b1242cd8add..b643fef8f02f541f3122263f60340b2422cc5ca4 100644
--- a/smb/autotests/smburltest.cpp
+++ b/smb/autotests/smburltest.cpp
@@ -4,7 +4,9 @@
 */
 
 #include <QTest>
+#if QT_VERSION >= QT_VERSION_CHECK(5, 11, 0)
 #include <QAbstractItemModelTester>
+#endif
 
 #include "smburl.h"
 
diff --git a/smb/kdsoap-ws-discovery-client/src/wsdiscoveryclient.cpp b/smb/kdsoap-ws-discovery-client/src/wsdiscoveryclient.cpp
index f103805cc1642c28f098e4723897e19631e3be0d..4d37818908138107db8dc6980704754e8115429b 100644
--- a/smb/kdsoap-ws-discovery-client/src/wsdiscoveryclient.cpp
+++ b/smb/kdsoap-ws-discovery-client/src/wsdiscoveryclient.cpp
@@ -73,7 +73,13 @@ void WSDiscoveryClient::sendProbe(const QList<KDQName> &typeList, const QList<QU
     KDSoapMessageAddressingProperties addressing;
     addressing.setAddressingNamespace(KDSoapMessageAddressingProperties::Addressing200408);
     addressing.setAction(QStringLiteral("http://schemas.xmlsoap.org/ws/2005/04/discovery/Probe"));
+#if QT_VERSION >= QT_VERSION_CHECK(5, 10, 0)
     addressing.setMessageID(QStringLiteral("urn:uuid:") + QUuid::createUuid().toString(QUuid::WithoutBraces));
+#else
+    auto uuid = QUuid::createUuid().toString().mid(1);
+    uuid.chop(1);
+    addressing.setMessageID(QStringLiteral("urn:uuid:") + uuid);
+#endif
     addressing.setDestination(QStringLiteral("urn:schemas-xmlsoap-org:ws:2005:04:discovery"));
     addressing.setReplyEndpointAddress(KDSoapMessageAddressingProperties::predefinedAddressToString(KDSoapMessageAddressingProperties::Anonymous));
     message.setMessageAddressingProperties(addressing);
@@ -102,7 +108,13 @@ void WSDiscoveryClient::sendResolve(const QString &endpointReferenceString)
     KDSoapMessageAddressingProperties addressing;
     addressing.setAddressingNamespace(KDSoapMessageAddressingProperties::Addressing200408);
     addressing.setAction(QStringLiteral("http://schemas.xmlsoap.org/ws/2005/04/discovery/Resolve"));
+#if QT_VERSION >= QT_VERSION_CHECK(5, 10, 0)
     addressing.setMessageID(QStringLiteral("urn:uuid:") + QUuid::createUuid().toString(QUuid::WithoutBraces));
+#else
+    auto uuid = QUuid::createUuid().toString().mid(1);
+    uuid.chop(1);
+    addressing.setMessageID(QStringLiteral("urn:uuid:") + uuid);
+#endif
     addressing.setDestination(QStringLiteral("urn:schemas-xmlsoap-org:ws:2005:04:discovery"));
     addressing.setReplyEndpointAddress(KDSoapMessageAddressingProperties::predefinedAddressToString(KDSoapMessageAddressingProperties::Anonymous));
     message.setMessageAddressingProperties(addressing);
diff --git a/smb/kio_smb.cpp b/smb/kio_smb.cpp
index d097a4c586de313f755f4baa92e7f87ea4678f07..6caaa9ef0530570e67382a10dca3820cb297e15c 100644
--- a/smb/kio_smb.cpp
+++ b/smb/kio_smb.cpp
@@ -88,10 +88,12 @@ void SMBSlave::virtual_hook(int id, void *data)
         QUrl *url = static_cast<QUrl *>(data);
         fileSystemFreeSpace(*url);
     } break;
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     case SlaveBase::Truncate: {
         auto length = static_cast<KIO::filesize_t *>(data);
         truncate(*length);
     } break;
+#endif
     default: {
         SlaveBase::virtual_hook(id, data);
     } break;
diff --git a/smb/kio_smb.h b/smb/kio_smb.h
index 50a9b312c0a153ffc09e37f1aeadad6568e575f0..ae7faf2b83f8dd8982ecdfa5767736e5a1bb20ab 100644
--- a/smb/kio_smb.h
+++ b/smb/kio_smb.h
@@ -44,6 +44,7 @@
 //--------------
 #include <kio/global.h>
 #include <kio/slavebase.h>
+#include <kio_version.h>
 
 //-----------------------------
 // Standard C library includes
@@ -247,7 +248,9 @@ public:
     void read(KIO::filesize_t bytesRequested) override;
     void write(const QByteArray &fileData) override;
     void seek(KIO::filesize_t offset) override;
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     void truncate(KIO::filesize_t length);
+#endif
     void close() override;
 
     // Functions not implemented  (yet)
diff --git a/smb/kio_smb_dir.cpp b/smb/kio_smb_dir.cpp
index 0116988726fd853102c03ada8552390081ddbcdf..5d29eec3cddb387503e717e18444f288e6068e1a 100644
--- a/smb/kio_smb_dir.cpp
+++ b/smb/kio_smb_dir.cpp
@@ -212,7 +212,11 @@ void SMBSlave::smbCopyGet(const QUrl &ksrc, const QUrl &kdst, int permissions, K
     bool bResume = false;
     const QFileInfo partInfo(dstFile + QLatin1String(".part"));
     const bool bPartExists = partInfo.exists();
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     const bool bMarkPartial = configValue(QStringLiteral("MarkPartial"), true);
+#else
+    const bool bMarkPartial = config()->readEntry("MarkPartial", true);
+#endif
 
     if (bMarkPartial && bPartExists && partInfo.size() > 0) {
         if (partInfo.isDir()) {
@@ -349,7 +353,11 @@ void SMBSlave::smbCopyGet(const QUrl &ksrc, const QUrl &kdst, int permissions, K
     if (isErr) {
         const QString sPart = partInfo.absoluteFilePath();
         if (bMarkPartial) {
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
             const int size = configValue(QStringLiteral("MinimumKeepSize"), DEFAULT_MINIMUM_KEEP_SIZE);
+#else
+            const int size = config()->readEntry("MinimumKeepSize", DEFAULT_MINIMUM_KEEP_SIZE);
+#endif
             if (partInfo.size() < size) {
                 QFile::remove(sPart);
             }
@@ -423,7 +431,11 @@ void SMBSlave::smbCopyPut(const QUrl &ksrc, const QUrl &kdst, int permissions, K
 
     bool bResume = false;
     bool bPartExists = false;
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     const bool bMarkPartial = configValue(QStringLiteral("MarkPartial"), true);
+#else
+    const bool bMarkPartial = config()->readEntry("MarkPartial", true);
+#endif
     const SMBUrl dstOrigUrl(kdst);
 
     if (bMarkPartial) {
@@ -536,7 +548,11 @@ void SMBSlave::smbCopyPut(const QUrl &ksrc, const QUrl &kdst, int permissions, K
     // Handle error condition.
     if (isErr) {
         if (bMarkPartial) {
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
             const int size = configValue(QStringLiteral("MinimumKeepSize"), DEFAULT_MINIMUM_KEEP_SIZE);
+#else
+            const int size = config()->readEntry("MinimumKeepSize", DEFAULT_MINIMUM_KEEP_SIZE);
+#endif
             const int errNum = cache_stat(dstUrl, &st);
             if (errNum == 0 && st.st_size < size) {
                 smbc_unlink(dstUrl.toSmbcUrl());
diff --git a/smb/kio_smb_file.cpp b/smb/kio_smb_file.cpp
index e2f72bdf11fb581ff18979ce96cecce3e1e75fbf..f1e554d057cb91178d71e40afa154a6f27f282e3 100644
--- a/smb/kio_smb_file.cpp
+++ b/smb/kio_smb_file.cpp
@@ -275,6 +275,7 @@ void SMBSlave::seek(KIO::filesize_t offset)
     }
 }
 
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
 void SMBSlave::truncate(KIO::filesize_t length)
 {
     off_t res = smbc_ftruncate(m_openFd, static_cast<off_t>(length));
@@ -286,6 +287,7 @@ void SMBSlave::truncate(KIO::filesize_t length)
         truncated(length);
     }
 }
+#endif
 
 void SMBSlave::closeWithoutFinish()
 {
diff --git a/smb/wsdiscoverer.cpp b/smb/wsdiscoverer.cpp
index 7743d37a9ad71ea58fcaed94f5743907a3d6a8ce..328ba48986aa7c3ee635a2ee8838fde896d85a69 100644
--- a/smb/wsdiscoverer.cpp
+++ b/smb/wsdiscoverer.cpp
@@ -106,13 +106,25 @@ public:
         KDSoapMessageAddressingProperties addressing;
         addressing.setAddressingNamespace(KDSoapMessageAddressingProperties::Addressing200408);
         addressing.setAction(QStringLiteral("http://schemas.xmlsoap.org/ws/2004/09/transfer/Get"));
+#if QT_VERSION >= QT_VERSION_CHECK(5, 10, 0)
         addressing.setMessageID(QStringLiteral("urn:uuid:") + QUuid::createUuid().toString(QUuid::WithoutBraces));
+#else
+        auto uuid = QUuid::createUuid().toString().mid(1);
+        uuid.chop(1);
+        addressing.setMessageID(QStringLiteral("urn:uuid:") + uuid);
+#endif
         addressing.setDestination(m_destination);
         addressing.setReplyEndpointAddress(KDSoapMessageAddressingProperties::predefinedAddressToString(
                                                KDSoapMessageAddressingProperties::Anonymous,
                                                KDSoapMessageAddressingProperties::Addressing200408));
+#if QT_VERSION >= QT_VERSION_CHECK(5, 10, 0)
         addressing.setSourceEndpointAddress(QStringLiteral("urn:uuid:")
                                             + QUuid::createUuid().toString(QUuid::WithoutBraces));
+#else
+        uuid = QUuid::createUuid().toString().mid(1);
+        uuid.chop(1);
+        addressing.setSourceEndpointAddress(QStringLiteral("urn:uuid:") + uuid);
+#endif
         message.setMessageAddressingProperties(addressing);
 
         QString computer;
diff --git a/sftp/kio_sftp.cpp b/sftp/kio_sftp.cpp
index 7c34569f76fd339e4c1b3d4a2efb0bc8b71127fb..0c913560c0edc730a9531d971cf0be7ed6c88231 100644
--- a/sftp/kio_sftp.cpp
+++ b/sftp/kio_sftp.cpp
@@ -297,11 +297,13 @@ void SFTPSlave::virtual_hook(int id, void *data)
         finalize(d->fileSystemFreeSpace(*url));
         return;
     }
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     case SlaveBase::Truncate: {
         auto length = static_cast<KIO::filesize_t *>(data);
         maybeError(d->truncate(*length));
         return;
     }
+#endif
     }
     SlaveBase::virtual_hook(id, data);
 }
@@ -1479,6 +1481,7 @@ Result SFTPInternal::seek(KIO::filesize_t offset)
     return Result::pass();
 }
 
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
 Result SFTPInternal::truncate(KIO::filesize_t length)
 {
     qCDebug(KIO_SFTP_LOG) << "truncate, length =" << length;
@@ -1506,6 +1509,7 @@ Result SFTPInternal::truncate(KIO::filesize_t length)
 
     return Result::pass();
 }
+#endif
 
 void SFTPInternal::close()
 {
@@ -1679,7 +1683,11 @@ Result SFTPInternal::sftpPut(const QUrl &url, int permissions, JobFlags flags, i
     sftp_attributes sb = sftp_lstat(mSftp, dest_orig_c.constData());
     const bool bOrigExists = (sb != nullptr);
     bool bPartExists = false;
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     const bool bMarkPartial = q->configValue(QStringLiteral("MarkPartial"), true);
+#else
+    const bool bMarkPartial = q->config()->readEntry("MarkPartial", true);
+#endif
 
     // Don't change permissions of the original file
     if (bOrigExists) {
@@ -1843,7 +1851,11 @@ Result SFTPInternal::sftpPut(const QUrl &url, int permissions, JobFlags flags, i
 
             sftp_attributes attr = sftp_stat(mSftp, dest.constData());
             if (bMarkPartial && attr != nullptr) {
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
                 size_t size = q->configValue(QStringLiteral("MinimumKeepSize"), DEFAULT_MINIMUM_KEEP_SIZE);
+#else
+                size_t size = q->config()->readEntry("MinimumKeepSize", DEFAULT_MINIMUM_KEEP_SIZE);
+#endif
                 if (attr->size < size) {
                     sftp_unlink(mSftp, dest.constData());
                 }
@@ -1993,7 +2005,11 @@ Result SFTPInternal::sftpCopyGet(const QUrl &url, const QString &sCopyFile, int
     const QString sPart = sCopyFile + QLatin1String(".part"); // do we have a ".part" file?
     QFileInfo partFile(sPart);
     const bool bPartExists = partFile.exists();
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     const bool bMarkPartial = q->configValue(QStringLiteral("MarkPartial"), true);
+#else
+    const bool bMarkPartial = q->config()->readEntry("MarkPartial", true);
+#endif
     const QString dest = (bMarkPartial ? sPart : sCopyFile);
 
     if (bMarkPartial && bPartExists) {
@@ -2067,7 +2083,11 @@ Result SFTPInternal::sftpCopyGet(const QUrl &url, const QString &sCopyFile, int
             }
         } else{
             partFile.refresh();
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
             const int size = q->configValue(QStringLiteral("MinimumKeepSize"), DEFAULT_MINIMUM_KEEP_SIZE);
+#else
+            const int size = q->config()->readEntry("MinimumKeepSize", DEFAULT_MINIMUM_KEEP_SIZE);
+#endif
             if (partFile.exists() && partFile.size() <  size) { // should a very small ".part" be deleted?
                 QFile::remove(sPart);
             }
@@ -2078,6 +2098,7 @@ Result SFTPInternal::sftpCopyGet(const QUrl &url, const QString &sCopyFile, int
     if (!mtimeStr.isEmpty()) {
         QDateTime dt = QDateTime::fromString(mtimeStr, Qt::ISODate);
         if (dt.isValid()) {
+#if QT_VERSION >= QT_VERSION_CHECK(5, 10, 0)
             QFile receivedFile(sCopyFile);
             if (receivedFile.exists()) {
                 if (!receivedFile.open(QIODevice::ReadWrite | QIODevice::Text)) {
@@ -2087,6 +2108,14 @@ Result SFTPInternal::sftpCopyGet(const QUrl &url, const QString &sCopyFile, int
                     receivedFile.setFileTime(dt, QFileDevice::FileModificationTime);
                 }
             }
+#else
+            struct utimbuf utbuf;
+            QT_STATBUF buff;
+            QT_STAT(QFile::encodeName(sCopyFile), &buff);
+            utbuf.actime = buff.st_atime; // access time, unchanged
+            utbuf.modtime = dt.toTime_t(); // modification time
+            utime(QFile::encodeName(sCopyFile), &utbuf);
+#endif
         }
     }
 
diff --git a/sftp/kio_sftp.h b/sftp/kio_sftp.h
index 394693ee1041df96f50e279d31c0e3c44657b1e8..8b63dedb21fdcfda6009a66aa75b0bb6ad90b532 100644
--- a/sftp/kio_sftp.h
+++ b/sftp/kio_sftp.h
@@ -25,6 +25,7 @@
 
 #include <kio/global.h>
 #include <kio/slavebase.h>
+#include <kio_version.h>
 
 #include <libssh/libssh.h>
 #include <libssh/sftp.h>
@@ -94,7 +95,9 @@ public:
     Q_REQUIRED_RESULT Result read(KIO::filesize_t size);
     Q_REQUIRED_RESULT Result write(const QByteArray &data);
     Q_REQUIRED_RESULT Result seek(KIO::filesize_t offset);
+#if KIO_VERSION >= QT_VERSION_CHECK(5, 66, 0)
     Q_REQUIRED_RESULT Result truncate(KIO::filesize_t length);
+#endif
     void close();
     Q_REQUIRED_RESULT Result special(const QByteArray &data);
 
