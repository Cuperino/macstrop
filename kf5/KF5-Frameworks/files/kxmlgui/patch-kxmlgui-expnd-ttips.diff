From ecd7cefd8d4b8ddb15b8e3a3e6e9bd5c55a9c12c Mon Sep 17 00:00:00 2001
From: Felix Ernst <fe.a.ernst@gmail.com>
Date: Fri, 26 Feb 2021 12:39:43 +0100
Subject: [PATCH 1/9] Make ToolTips expandable

This commit adds a small hint to tooltips which can be expanded.
Pressing Shift will show the expanded help in a widget that isn't
hidden when the mouse moves. This is necessary so we can have
clickable links there which will allow us to refer users to the
manual, community wiki etc. which makes these resources more readily
available and helps us avoid duplicating their work. It also allows
us to keep the tooltips a reasonable length.

If a widget provides an expanded tooltip but no normal tooltip, not
even a hint is shown when hovering the widget. This way no hovering
text will appear unless it was explicitly set by a developer. At
the same time this lets us keep Whats This available for all areas.

An exception to this are QMenus. The hint to show the expanded
tooltip is shown for them even if no tooltip has been explicitly
set. If a tooltip has been explicitly set, that information is also
shown because this implies that the iconText() which is
automatically set to be the toolTip() is not sufficient.

This commit also adds the shortcut to tooltips of `QToolButton`s.

Having tooltips be expandable lets us minimise the risk of tooltips
covering currently used areas of an application by accident.

Related discussion: https://phabricator.kde.org/T9986
===
 LICENSES/BSD-2-Clause.txt |   9 ++
 src/CMakeLists.txt        |   2 +
 src/kmainwindow.cpp       |   8 ++
 src/ktooltiphelper.cpp    | 206 ++++++++++++++++++++++++++++++++++++++
 src/ktooltiphelper.h      | 112 +++++++++++++++++++++
 src/ktooltiphelper_p.h    |  78 +++++++++++++++
 6 files changed, 415 insertions(+)
 create mode 100644 LICENSES/BSD-2-Clause.txt
 create mode 100644 src/ktooltiphelper.cpp
 create mode 100644 src/ktooltiphelper.h
 create mode 100644 src/ktooltiphelper_p.h

diff --git LICENSES/BSD-2-Clause.txt LICENSES/BSD-2-Clause.txt
new file mode 100644
index 0000000..b0e20f5
--- /dev/null
+++ LICENSES/BSD-2-Clause.txt
@@ -0,0 +1,9 @@
+Copyright (c) <year> <owner> All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
+
+1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
+
+2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
diff --git autotests/CMakeLists.txt autotests/CMakeLists.txt
index cc5bef4..c5b2b69 100644
--- autotests/CMakeLists.txt
+++ autotests/CMakeLists.txt
@@ -11,6 +11,7 @@ ecm_add_tests(
 ecm_add_tests(
    kmainwindow_unittest.cpp
    ktoolbar_unittest.cpp
+   ktooltiphelper_unittest.cpp
    kxmlgui_unittest.cpp
    GUI
    LINK_LIBRARIES Qt5::Test KF5::IconThemes KF5::XmlGui
diff --git autotests/ktooltiphelper_unittest.cpp autotests/ktooltiphelper_unittest.cpp
new file mode 100644
index 0000000..719292a
--- /dev/null
+++ autotests/ktooltiphelper_unittest.cpp
@@ -0,0 +1,207 @@
+/*
+    This file is part of the KDE libraries
+    SPDX-FileCopyrightText: 2021 Felix Ernst <fe.a.ernst@gmail.com>
+
+    SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
+*/
+
+#include "ktooltiphelper_unittest.h"
+
+#include <KToolTipHelper>
+
+#include <QTest>
+
+#include <QAction>
+#include <QApplication>
+#include <QFrame>
+#include <QHBoxLayout>
+#include <QLabel>
+#include <QMainWindow>
+#include <QMenu>
+#include <QStyle>
+#include <QToolButton>
+#include <QToolTip>
+#include <QWhatsThis>
+
+#include <memory>
+
+QString KToolTipHelper_UnitTest::shownToolTip(QWidget *widget)
+{
+    QTest::mouseMove(m_frameWithoutToolTip);
+    const bool resetWorked = QTest::qWaitFor([](){return !QToolTip::isVisible();}, 3000);
+    if (!resetWorked) {
+        qWarning("The tooltip did not properly hide itself after moving to an area without tooltip.");
+    }
+
+    QTest::mouseMove(widget);
+    if (!QTest::qWaitFor(&QToolTip::isVisible,
+            widget->style()->styleHint(QStyle::SH_ToolTip_WakeUpDelay, nullptr, widget) + 1000)
+    ) {
+        return QStringLiteral("");
+    }
+    return QToolTip::text();
+}
+
+void KToolTipHelper_UnitTest::initTestCase()
+{
+    m_window.reset(new QMainWindow());
+    m_centralWidget = new QWidget(m_window.get());
+    m_centralWidget->setGeometry(0, 0, 100, 100);
+    m_window->setCentralWidget(m_centralWidget);
+
+    QHBoxLayout *layout = new QHBoxLayout(m_centralWidget);
+
+    m_frame = new QFrame(m_centralWidget);
+    m_frame->setFrameStyle(3);
+    new QLabel(QStringLiteral("test area"), m_frame);
+    layout->addWidget(m_frame);
+
+    m_toolButton = new QToolButton(m_centralWidget);
+    layout->addWidget(m_toolButton);
+
+    m_frameWithoutToolTip = new QFrame(m_centralWidget);
+    m_frameWithoutToolTip->setFrameStyle(2);
+    new QLabel(QStringLiteral("no tooltip"), m_frameWithoutToolTip);
+    layout->addWidget(m_frameWithoutToolTip);
+
+    qApp->installEventFilter(KToolTipHelper::instance());
+
+    m_window->show();
+    m_window->ensurePolished();
+}
+
+void KToolTipHelper_UnitTest::testGeneralWidget()
+{
+    // tests without whatsThis()
+    QVERIFY(shownToolTip(m_frameWithoutToolTip).isEmpty());
+    m_frame->setToolTip(QStringLiteral("frame's tooltip"));
+    QCOMPARE(shownToolTip(m_frame), m_frame->toolTip());
+
+    QHelpEvent *helpEvent = new QHelpEvent(QEvent::ToolTip, QPoint(1,1), m_frame->mapToGlobal(QPoint(1, 1)));
+    QVERIFY2(!KToolTipHelper::instance()->eventFilter(m_frame, helpEvent),
+             "These most basic tooltips should not be filtered so applications can still rely"
+             "on tooltip events in most cases.");
+
+    // tests with whatsThis()
+    m_frame->setToolTip(QStringLiteral(""));
+    m_frame->setWhatsThis(QStringLiteral("frame's whatsThis"));
+    QVERIFY2(shownToolTip(m_frame).isEmpty(),
+            "No whatsThisHint should be shown when no toolTip was set.");
+
+    m_frame->setToolTip(KToolTipHelper::whatsThisHintOnly());
+    QVERIFY2(shownToolTip(m_frame) != KToolTipHelper::whatsThisHintOnly(),
+             "The KToolTipHelper::whatsThisHintOnly()-string is no user-facing string"
+             "and should therefore never actually be displayed.");
+
+    m_frame->setToolTip(QStringLiteral("frame's tooltip"));
+    const QString toolTip = shownToolTip(m_frame);
+    QVERIFY(toolTip.contains(m_frame->toolTip()));
+    QVERIFY2(toolTip.length() > m_frame->toolTip().length(),
+            "The frame's toolTip is supposed to contain the whatsThisHint.");
+
+    auto layout = new QVBoxLayout(m_frame);
+    auto subFrame = std::unique_ptr<QFrame>(new QFrame(m_frame));
+    new QLabel(QStringLiteral("subFrame"), subFrame.get());
+    layout->addWidget(subFrame.get());
+    QCOMPARE(shownToolTip(subFrame.get()), toolTip);
+
+    subFrame->setToolTip(QStringLiteral("subFrame's tooltip"));
+    QCOMPARE(shownToolTip(subFrame.get()), subFrame->toolTip());
+}
+
+void KToolTipHelper_UnitTest::testInvokingWhatsThis()
+{
+    m_frame->setWhatsThis(QStringLiteral("frame's whatsThis"));
+    m_frame->setToolTip(KToolTipHelper::whatsThisHintOnly());
+    shownToolTip(m_frame);
+    QTest::keyClick(m_frame, Qt::Key_Shift);
+    QVERIFY2(QTest::qWaitFor([](){return !QToolTip::isVisible(); }, 4000),
+             "whatsThis should be shown now.");
+    QVERIFY2(shownToolTip(m_frame).isEmpty(),
+             "A toolTip was shown which shouldn't be possible because a WhatsThis widget"
+             "should be displayed at this moment.");
+    QWhatsThis::hideText();
+    QVERIFY2(!shownToolTip(m_frame).isEmpty(),
+             "A toolTip was not shown although this should now be possible again "
+             "because the WhatsThis widget was just hidden.");
+}
+
+void KToolTipHelper_UnitTest::testQToolButton()
+{
+    QVERIFY(shownToolTip(m_toolButton).isEmpty());
+
+    auto action = std::unique_ptr<QAction>(new QAction(QStringLiteral("action")));
+    action->setToolTip(QStringLiteral("action's tooltip"));
+    m_toolButton->setDefaultAction(action.get());
+    QCOMPARE(shownToolTip(m_toolButton), action->toolTip());
+
+    auto helpEvent = std::unique_ptr<QHelpEvent>(
+            new QHelpEvent(QEvent::ToolTip, QPoint(1,1), m_toolButton->mapToGlobal(QPoint(1, 1))));
+    QVERIFY2(!KToolTipHelper::instance()->eventFilter(m_toolButton, helpEvent.get()),
+             "These most basic tooltips should not be filtered so applications can still rely"
+             "on tooltip events in most cases.");
+
+    action->setShortcut(Qt::CTRL | Qt::Key_K);
+    const QString toolTip(shownToolTip(m_toolButton));
+    QVERIFY(toolTip.contains(action->toolTip()));
+    //qDebug("%s > %s", qPrintable(toolTip), qPrintable(action->toolTip()));
+    QVERIFY2(toolTip.length() > action->toolTip().length(),
+             "The Keyboard shortcut should be visible.");
+
+    action->setWhatsThis(QStringLiteral("action's whatsThis"));
+    const QString toolTipWithWhatsThisHint(shownToolTip(m_toolButton));
+    QVERIFY(toolTipWithWhatsThisHint.contains(toolTip));
+    //qDebug("%s > %s", qPrintable(toolTipWithWhatsThisHint), qPrintable(toolTip));
+    QVERIFY2(toolTipWithWhatsThisHint.length() > toolTip.length(),
+             "The whatsThisHint should be visible.");
+
+    action->setShortcut(QKeySequence());
+    QVERIFY(shownToolTip(m_toolButton).length() < toolTipWithWhatsThisHint.length());
+
+    action->setWhatsThis(QStringLiteral(""));
+    QCOMPARE(shownToolTip(m_toolButton), action->toolTip());
+
+    action->setToolTip(KToolTipHelper::whatsThisHintOnly());
+    QVERIFY2(shownToolTip(m_toolButton).isEmpty(),
+            "It should not show the whatsThisHint if there is no whatsThis text.");
+
+    action->setWhatsThis(QStringLiteral("action's whatsThis"));
+    QVERIFY2(!shownToolTip(m_toolButton).isEmpty(),
+            "The whatsThisHint should be shown.");
+}
+
+void KToolTipHelper_UnitTest::testQMenu()
+{
+    auto menu = std::unique_ptr<QMenu>(new QMenu(m_centralWidget));
+    auto action = std::unique_ptr<QAction>(new QAction(QStringLiteral("action")));
+    action->setDisabled(true); // The tooltip should also be shown for disabled actions.
+    menu->addAction(action.get());
+    menu->show();
+    QVERIFY(shownToolTip(menu.get()).isEmpty());
+
+    action->setToolTip(QStringLiteral("action's tooltip"));
+    const QString toolTip(shownToolTip(menu.get()));
+    QCOMPARE(toolTip, action->toolTip());
+    action->setShortcut(Qt::CTRL | Qt::Key_K);
+    QCOMPARE(shownToolTip(menu.get()), toolTip);
+
+    action->setWhatsThis(QStringLiteral("action's whatsThis"));
+    const QString toolTipWithWhatsThisHint(shownToolTip(menu.get()));
+    QVERIFY2(toolTipWithWhatsThisHint.length() > toolTip.length(),
+             "The tooltip is supposed to contain a whatsThisHint.");
+
+    action->setToolTip(KToolTipHelper::whatsThisHintOnly());
+    QVERIFY(shownToolTip(menu.get()).length() < toolTipWithWhatsThisHint.length());
+
+    action->setWhatsThis(QStringLiteral(""));
+    QVERIFY(shownToolTip(menu.get()).isEmpty());
+}
+
+
+void KToolTipHelper_UnitTest::cleanupTestCase()
+{
+    qApp->removeEventFilter(KToolTipHelper::instance());
+}
+
+
+QTEST_MAIN(KToolTipHelper_UnitTest)
diff --git autotests/ktooltiphelper_unittest.h autotests/ktooltiphelper_unittest.h
new file mode 100644
index 0000000..4276f99
--- /dev/null
+++ autotests/ktooltiphelper_unittest.h
@@ -0,0 +1,44 @@
+/*
+    This file is part of the KDE libraries
+    SPDX-FileCopyrightText: 2021 Felix Ernst <fe.a.ernst@gmail.com>
+
+    SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
+*/
+
+#ifndef KTOOLTIPHELPER_UNITTEST_H
+#define KTOOLTIPHELPER_UNITTEST_H
+
+#include <QObject>
+
+#include <QMainWindow>
+
+#include <memory>
+
+class QFrame;
+class QToolButton;
+class QWidget;
+
+class KToolTipHelper_UnitTest : public QObject
+{
+    Q_OBJECT
+
+private:
+    QString shownToolTip(QWidget *widget);
+
+private Q_SLOTS:
+    void initTestCase();
+    void testGeneralWidget();
+    void testInvokingWhatsThis();
+    void testQToolButton();
+    void testQMenu();
+    void cleanupTestCase();
+
+private:
+    std::unique_ptr<QMainWindow> m_window;
+    QWidget *m_centralWidget;
+    QFrame *m_frame;
+    QFrame *m_frameWithoutToolTip;
+    QToolButton *m_toolButton;
+};
+
+#endif
diff --git src/CMakeLists.txt src/CMakeLists.txt
index 3461862..44daa6f 100644
--- src/CMakeLists.txt
+++ src/CMakeLists.txt
@@ -47,6 +47,7 @@ set(kxmlgui_SRCS
   ktoolbar.cpp
   ktoolbarhandler.cpp
   ktoolbarhelper.cpp
+  ktooltiphelper.cpp
   kxmlguibuilder.cpp
   kxmlguiclient.cpp
   kxmlguifactory.cpp
@@ -128,6 +129,7 @@ ecm_generate_headers(KXmlGui_HEADERS
   KShortcutWidget
   KToggleToolBarAction
   KToolBar
+  KToolTipHelper
   KXMLGUIBuilder
   KXMLGUIClient
   KXMLGUIFactory
diff --git src/kmainwindow.cpp src/kmainwindow.cpp
index fac00c7..83a009b 100644
--- src/kmainwindow.cpp
+++ src/kmainwindow.cpp
@@ -31,6 +31,7 @@
 #include "kmainwindowiface_p.h"
 #endif
 #include "ktoolbarhandler_p.h"
+#include "ktooltiphelper.h"
 #include "khelpmenu.h"
 #include "ktoolbar.h"
 
@@ -263,6 +264,8 @@ void KMainWindowPrivate::init(KMainWindow *_q)
     letDirtySettings = true;
 
     sizeApplied = false;
+
+    qApp->installEventFilter(KToolTipHelper::instance());
 }
 
 static bool endsWithHashNumber(const QString &s)
diff --git src/ktooltiphelper.cpp src/ktooltiphelper.cpp
new file mode 100644
index 0000000..f467cee
--- /dev/null
+++ src/ktooltiphelper.cpp
@@ -0,0 +1,323 @@
+/*
+    This file is part of the KDE project
+    SPDX-FileCopyrightText: 2021 Felix Ernst <fe.a.ernst@gmail.com>
+
+    SPDX-License-Identifier: LGPL-2.1-or-later OR BSD-2-Clause
+*/
+
+#include "ktooltiphelper.h"
+#include "ktooltiphelper_p.h"
+
+#include <KColorScheme>
+#include <KLocalizedString>
+
+#include <QAction>
+#include <QApplication>
+#include <QCursor>
+#include <QDesktopServices>
+#include <QHelpEvent>
+#include <QMenu>
+#include <QStyle>
+#include <QtGlobal>
+#include <QToolButton>
+#include <QToolTip>
+#include <QWhatsThis>
+#include <QWhatsThisClickedEvent>
+#include <QWindow>
+
+KToolTipHelper *KToolTipHelper::instance()
+{
+    return KToolTipHelperPrivate::instance();
+}
+
+KToolTipHelper *KToolTipHelperPrivate::instance()
+{
+    if (!s_instance) {
+        s_instance = new KToolTipHelper(qApp);
+    }
+    return s_instance;
+}
+
+KToolTipHelper::KToolTipHelper(QObject *parent)
+    : QObject{parent},
+      d{new KToolTipHelperPrivate(this)}
+{
+}
+
+KToolTipHelperPrivate::KToolTipHelperPrivate(KToolTipHelper *q)
+    : q{q}
+{
+    m_toolTipTimeout.setSingleShot(true);
+    connect(&m_toolTipTimeout, &QTimer::timeout,
+            this, &KToolTipHelperPrivate::postToolTipEventIfCursorDidntMove);
+}
+
+KToolTipHelper::~KToolTipHelper() = default;
+
+KToolTipHelperPrivate::~KToolTipHelperPrivate() = default;
+
+bool KToolTipHelper::eventFilter(QObject *watched, QEvent *event)
+{
+    return d->eventFilter(watched, event);
+}
+
+bool KToolTipHelperPrivate::eventFilter(QObject *watched, QEvent *event)
+{
+    switch (event->type()) {
+    case QEvent::Hide:
+        return handleHideEvent(watched, event);
+    case QEvent::KeyPress:
+        return handleKeyPressEvent(event);
+    case QEvent::ToolTip:
+        return handleToolTipEvent(static_cast<QWidget *>(watched),
+                                  static_cast<QHelpEvent *>(event));
+    case QEvent::WhatsThisClicked:
+        return handleWhatsThisClickedEvent(event);
+    default:
+        return false;
+    }
+}
+
+const QString KToolTipHelper::whatsThisHintOnly()
+{
+    return KToolTipHelperPrivate::whatsThisHintOnly();
+}
+
+const QString KToolTipHelperPrivate::whatsThisHintOnly()
+{
+    return QStringLiteral("tooltip bug"); // if a user ever sees this, there is a bug somewhere.
+}
+
+bool KToolTipHelperPrivate::handleHideEvent(QObject *watched, QEvent *event)
+{
+    if (event->spontaneous()) {
+        return false;
+    }
+    const QMenu *menu = qobject_cast<QMenu *>(watched);
+    if (!menu) {
+        return false;
+    }
+
+    m_cursorGlobalPosWhenLastMenuHid = QCursor::pos();
+    m_toolTipTimeout.start(menu->style()->styleHint(QStyle::SH_ToolTip_WakeUpDelay, nullptr, menu));
+    return false;
+}
+
+bool KToolTipHelperPrivate::handleKeyPressEvent(QEvent *event)
+{
+    if (!QToolTip::isVisible()
+        || static_cast<QKeyEvent *>(event)->key() != Qt::Key_Shift
+        || !m_widget
+    ) {
+        return false;
+    }
+
+    QToolTip::hideText();
+    // We need to explicitly hide the tooltip window before showing the whatsthis because hideText()
+    // runs a timer before hiding. On Wayland when hiding a popup Qt will close all popups opened after
+    // it, including the whatsthis popup here. Unfortunately we can't access the tooltip window/widget
+    // directly so we search for it below.
+    Q_ASSERT(QApplication::focusWindow());
+    const auto windows = QGuiApplication::allWindows();
+    auto it = std::find_if(windows.begin(), windows.end(), [](const QWindow *window) {
+        return window->type() == Qt::ToolTip && QGuiApplication::focusWindow()->isAncestorOf(window);
+    });
+    if (it != windows.end()) {
+        (*it)->setVisible(false);
+    }
+
+    if (QMenu *menu = qobject_cast<QMenu *>(m_widget)) {
+        if (m_action) {
+            // The widget displaying the whatsThis() text trys to avoid covering the QWidget
+            // given as the third parameter of QWhatsThis::showText(). Normally we would have
+            // menu as the third parameter but because QMenus are quite big the text panel
+            // oftentimes fails to find a nice position around it and will instead cover
+            // the hovered action itself! To avoid this we give a smaller positioningHelper-widget
+            // as the third parameter which only has the size of the hovered menu action entry.
+            QWidget positioningHelper{menu};
+            positioningHelper.setGeometry(menu->actionGeometry(m_action));
+            QWhatsThis::showText(m_lastExpandableToolTipGlobalPos,
+                                 m_action->whatsThis(), &positioningHelper);
+        }
+        return true;
+    }
+    QWhatsThis::showText(m_lastExpandableToolTipGlobalPos, m_widget->whatsThis(), m_widget);
+    return true;
+}
+
+bool KToolTipHelperPrivate::handleMenuToolTipEvent(QMenu *menu, QHelpEvent *helpEvent)
+{
+    Q_CHECK_PTR(helpEvent);
+    Q_CHECK_PTR(menu);
+
+    m_action = menu->actionAt(helpEvent->pos());
+    if (!m_action || (m_action->menu() && !m_action->menu()->isEmpty())) {
+        // Do not show a tooltip when there is a menu since they will compete space-wise.
+        QToolTip::hideText();
+        return false;
+    }
+
+    // All actions have their text as a tooltip by default.
+    // We only want to display the tooltip text if it isn't identical
+    // to the already visible text in the menu.
+    const bool explicitToolTip = hasExplicitToolTip(m_action);
+    // We only want to show the whatsThisHint in a tooltip if the whatsThis isn't empty.
+    const bool emptyWhatsThis = m_action->whatsThis().isEmpty();
+    if (!explicitToolTip && emptyWhatsThis) {
+        QToolTip::hideText();
+        return false;
+    }
+
+    // Calculate a nice location for the tooltip so it doesn't unnecessarily cover
+    // a part of the menu.
+    const QRect actionGeometry = menu->actionGeometry(m_action);
+    const int xOffset = menu->layoutDirection() == Qt::RightToLeft ? 0 : actionGeometry.width();
+    const QPoint toolTipPosition(
+            helpEvent->globalX() - helpEvent->x() + xOffset,
+            helpEvent->globalY() - helpEvent->y() + actionGeometry.y() - actionGeometry.height() / 2);
+
+    if (explicitToolTip) {
+        if (emptyWhatsThis) {
+            if (m_action->toolTip() != whatsThisHintOnly()) {
+                QToolTip::showText(toolTipPosition, m_action->toolTip(), m_widget, actionGeometry);
+            }
+        } else {
+            showExpandableToolTip(toolTipPosition, m_action->toolTip(), actionGeometry);
+        }
+        return true;
+    }
+    Q_ASSERT(!m_action->whatsThis().isEmpty());
+    showExpandableToolTip(toolTipPosition, QStringLiteral(), actionGeometry);
+    return true;
+}
+
+bool KToolTipHelperPrivate::handleToolTipEvent(QWidget *watchedWidget, QHelpEvent *helpEvent)
+{
+    m_widget = watchedWidget;
+
+    if (QToolButton *toolButton = qobject_cast<QToolButton *>(m_widget)) {
+        if (const QAction *action = toolButton->defaultAction()) {
+            if (!action->shortcut().isEmpty() && action->toolTip() != whatsThisHintOnly()) {
+                toolButton->setToolTip(i18nc(
+                        "@info:tooltip %1 is the tooltip of an action, %2 is its keyboard shorcut",
+                        "%1 (%2)",
+                        action->toolTip(), action->shortcut().toString(QKeySequence::NativeText)));
+                // Do not replace the brackets in the above i18n-call with <shortcut> tags from
+                // KUIT because mixing KUIT with HTML is not allowed and %1 could be anything.
+
+                // We don't show the tooltip here because aside from adding the keyboard shortcut
+                // the QToolButton can now be handled like the tooltip event for any other widget.
+            }
+        }
+    } else if (QMenu *menu = qobject_cast<QMenu *>(m_widget)) {
+        return handleMenuToolTipEvent(menu, helpEvent);
+    }
+
+    while (m_widget->toolTip().isEmpty()) {
+        m_widget = m_widget->parentWidget();
+        if (!m_widget) {
+            return false;
+        }
+    }
+    if (m_widget->whatsThis().isEmpty()) {
+        if (m_widget->toolTip() == whatsThisHintOnly()) {
+            return true;
+        }
+        return false;
+    }
+    showExpandableToolTip(helpEvent->globalPos(), m_widget->toolTip());
+    return true;
+}
+
+bool KToolTipHelperPrivate::handleWhatsThisClickedEvent(QEvent *event)
+{
+    event->accept();
+    const auto whatsThisClickedEvent = static_cast<QWhatsThisClickedEvent *>(event);
+    QDesktopServices::openUrl(QUrl(whatsThisClickedEvent->href()));
+    return true;
+}
+
+void KToolTipHelperPrivate::postToolTipEventIfCursorDidntMove() const
+{
+    const QPoint globalCursorPos = QCursor::pos();
+    if (globalCursorPos != m_cursorGlobalPosWhenLastMenuHid) {
+        return;
+    }
+
+    const auto widgetUnderCursor = qApp->widgetAt(globalCursorPos);
+    // We only want a behaviour change for QMenus.
+    if (qobject_cast<QMenu *>(widgetUnderCursor)) {
+        qGuiApp->postEvent(widgetUnderCursor,
+                           new QHelpEvent(QEvent::ToolTip,
+                                          widgetUnderCursor->mapFromGlobal(globalCursorPos),
+                                          globalCursorPos));
+    }
+}
+
+void KToolTipHelperPrivate::showExpandableToolTip(const QPoint &globalPos,
+                                                  const QString &toolTip,
+                                                  const QRect &rect)
+{
+    m_lastExpandableToolTipGlobalPos = QPoint(globalPos);
+    const KColorScheme colorScheme = KColorScheme(QPalette::Normal, KColorScheme::Tooltip);
+    const QColor hintTextColor = colorScheme.foreground(KColorScheme::InactiveText).color();
+
+    if (toolTip.isEmpty() || toolTip == whatsThisHintOnly()) {
+        // i18n: @info:tooltip Pressing Shift will show a longer message with contextual info
+        // about the thing the tooltip was invoked for. If there is no good way to translate
+        // the message, translating "Press Shift to learn more." would also mostly fit what
+        // is supposed to be expressed here.
+        const QString whatsThisHint = i18n(
+                "<small><font color=\"%1\">Press <b>Shift</b> for more Info.</font></small>",
+                hintTextColor.name());
+        QToolTip::showText(m_lastExpandableToolTipGlobalPos, whatsThisHint, m_widget, rect);
+    } else {
+        // i18n: @info:tooltip The 'Press Shift for more' message is added to tooltips that have an
+        // available whatsthis help message. Pressing Shift will show this more exhaustive message.
+        // It is particularly important to keep this translation short because:
+        // 1. A longer translation will increase the size of *every* tooltip that gets this hint
+        //      added e.g. a two word tooltip followed by a four word hint.
+        // 2. The purpose of this hint is so we can keep the tooltip shorter than it would have to
+        //      be if we couldn't refer to the message that appears when pressing Shift.
+        //
+        // %1 can be any tooltip. <br/> produces a linebreak. The other things between < and > are
+        // styling information. The word "more" refers to "information".
+        const QString toolTipWithHint = QStringLiteral("<qt>") + i18n(
+                "%1<br/><small><font color=\"%2\">Press <b>Shift</b> for more.</font></small>",
+                toolTip, hintTextColor.name()) + QStringLiteral("</qt>");
+        // Do not replace above HTML tags with KUIT because mixing HTML and KUIT is not allowed and
+        // we can not know what kind of markup the tooltip in %1 contains.
+        QToolTip::showText(m_lastExpandableToolTipGlobalPos, toolTipWithHint, m_widget, rect);
+    }
+}
+
+KToolTipHelper *KToolTipHelperPrivate::s_instance = nullptr;
+
+bool hasExplicitToolTip(const QAction *action)
+{
+    Q_CHECK_PTR(action);
+    const QString iconText = action->iconText();
+    const QString toolTip = action->toolTip();
+    int i = -1, j = -1;
+    do {
+        i++; j++;
+        // Both of these QStrings are considered equal if their only differences are '&' and '.' chars.
+        // Now move both of their indices to the next char that is neither '&' nor '.'.
+        while (i < iconText.size()
+            && (iconText.at(i) == QLatin1Char('&') || iconText.at(i) == QLatin1Char('.'))) {
+            i++;
+        }
+        while (j < toolTip.size()
+            && (toolTip.at(j) == QLatin1Char('&') || toolTip.at(j) == QLatin1Char('.'))) {
+            j++;
+        }
+
+        if (i >= iconText.size()) {
+            return j < toolTip.size();
+        }
+        if (j >= toolTip.size()) {
+            return i < iconText.size();
+        }
+    } while (iconText.at(i) == toolTip.at(j));
+    return true; // We have found a difference.
+}
diff --git src/ktooltiphelper.h src/ktooltiphelper.h
new file mode 100644
index 0000000..8eff483
--- /dev/null
+++ src/ktooltiphelper.h
@@ -0,0 +1,108 @@
+/*
+    This file is part of the KDE project
+    SPDX-FileCopyrightText: 2021 Felix Ernst <fe.a.ernst@gmail.com>
+
+    SPDX-License-Identifier: LGPL-2.1-or-later OR BSD-2-Clause
+*/
+
+#ifndef KTOOLTIPHELPER_H
+#define KTOOLTIPHELPER_H
+
+#include <kxmlgui_export.h>
+
+#include <QObject>
+
+#include <memory>
+
+class KToolTipHelperPrivate;
+
+/**
+ * @class KToolTipHelper ktooltiphelper.h KToolTipHelper
+ *
+ * @short An event filter used to enhance tooltips
+ *
+ * Example:
+ * Without this class, a tooltip of a QToolButton of a "New" action will read something like
+ * "New File". Using this class, the tooltip can be enhanced to read something like
+ * "New File (Ctrl+N)" and in the next line smaller "Press Shift for help.".
+ * Pressing Shift will open the "What's This" context help for that widget. If a hyperlink in
+ * that help is clicked, the corresponding event will also be filtered by this class and open
+ * the linked location.
+ *
+ * The extra text added to tooltips is only shown when available and where it makes sense. If a
+ * QToolButton has no associated shortcut and an empty QWidget::whatsThis(), this class won't
+ * tamper with the requested tooltip at all.
+ *
+ * This class also activates tooltips for actions in QMenus but only when it makes sense like when
+ * the tooltip isn't equal to the already displayed text.
+ *
+ * If you want the "Press Shift for help." line to be displayed for a widget that has whatsThis()
+ * but no toolTip() take a look at KToolTipHelper::whatsThisHintOnly().
+ *
+ * The enhanced tooltips can be enabled at any time after the QApplication was constructed with
+ * \code
+ * qApp->installEventFilter(KToolTipHelper::instance());
+ * \endcode
+ * Therefore, to de-activate them you can call
+ * \code
+ * qApp->removeEventFilter(KToolTipHelper::instance());
+ * \endcode
+ * any time later.
+ *
+ * If you want KToolTipHelper to not tamper with certain QEvents, e.g. you want to handle some
+ * tooltips differently or you want to change what happens when a QWhatsThisClickedEvent is
+ * processed, first remove KToolTipHelper as an event filter just like in the line of code above.
+ * Then create your own custom EventFilter that handles those QEvents differently and for all
+ * cases that you don't want to handle differently call
+ * \code
+ * return KToolTipHelper::instance()->eventFilter(watched, event);
+ * \endcode
+ *
+ * KMainWindow will have this EventFilter installed by default from framework version 5.84 onward
+ * so if you want to opt out of that, remove the EventFilter in the constructor of your MainWindow
+ * class inheriting from KMainWindow.
+ *
+ * @see QToolTip
+ * @since 5.84
+ */
+class KXMLGUI_EXPORT KToolTipHelper : public QObject
+{
+    Q_OBJECT
+    Q_DISABLE_COPY(KToolTipHelper)
+
+public:
+    static KToolTipHelper *instance();
+
+    /**
+     * Filters QEvent::ToolTip if an enhanced tooltip is available for the widget.
+     * Filters the QEvent::KeyPress that is used to expand an expandable tooltip.
+     * Filters QEvent::WhatsThisClicked so hyperlinks in whatsThis() texts work.
+     *
+     * @see QObject::eventFilter()
+     * @see QHelpEvent
+     */
+    virtual bool eventFilter(QObject* watched, QEvent* event) override;
+
+    /**
+     * Use this to have a widget show "Press Shift for help." as its tooltip.
+     * \code
+     * widget->setToolTip(KToolTipHelper::whatsThisHintOnly());
+     * \endcode
+     * KToolTipHelper won't show that tooltip if the widget's whatsThis() is empty.
+     *
+     * @return a QString that is interpreted by this class to show the expected tooltip.
+     */
+    static const QString whatsThisHintOnly();
+
+private:
+    explicit KToolTipHelper(QObject *parent);
+
+    virtual ~KToolTipHelper();
+
+private:
+    std::unique_ptr<KToolTipHelperPrivate> const d;
+
+    friend class KToolTipHelperPrivate;
+};
+
+#endif // KTOOLTIPHELPER_H
diff --git src/ktooltiphelper_p.h src/ktooltiphelper_p.h
new file mode 100644
index 0000000..1a7e829
--- /dev/null
+++ src/ktooltiphelper_p.h
@@ -0,0 +1,131 @@
+/*
+    This file is part of the KDE project
+    SPDX-FileCopyrightText: 2021 Felix Ernst <fe.a.ernst@gmail.com>
+
+    SPDX-License-Identifier: LGPL-2.1-or-later OR BSD-2-Clause
+*/
+
+#ifndef KTOOLTIPHELPER_P_H
+#define KTOOLTIPHELPER_P_H
+
+#include <qobject.h>
+
+#include <QPointer>
+#include <QRect>
+#include <QTimer>
+
+class KToolTipHelper;
+
+class QAction;
+class QHelpEvent;
+class QMenu;
+
+/**
+ * The private class of KToolTipHelper used for the PIMPL idiom.
+ * \internal
+ */
+class KToolTipHelperPrivate : public QObject
+{
+    Q_OBJECT
+
+public:
+    /**
+     * Singleton implementation for KToolTipHelper and
+     * NOT of this class (KToolTipHelperPrivate).
+     */
+    static KToolTipHelper *instance();
+
+    explicit KToolTipHelperPrivate(KToolTipHelper *q);
+
+    virtual ~KToolTipHelperPrivate();
+
+    /** @see KToolTipHelper::eventFilter() */
+    virtual bool eventFilter(QObject* watched, QEvent* event) override;
+
+    /** @see KToolTipHelper::whatsThisHintOnly() */
+    static const QString whatsThisHintOnly();
+
+    /**
+     * Makes sure submenus that show up do not mess with tooltips appearing in menus.
+     * This is somewhat of a workaround for Qt not posting QEvent::ToolTips when the
+     * cursor wasn't moved *after* a submenu hides.
+     * @return false.
+     */
+    bool handleHideEvent(QObject *watched, QEvent *event);
+
+    /**
+     * @return true if the key press is used to expand a tooltip. false otherwise.
+     */
+    bool handleKeyPressEvent(QEvent *event);
+
+    /**
+     * Is called from handleToolTipEvent() to handle a QEvent::ToolTip in a menu.
+     * This method will show the tooltip of the action that is hovered at a nice
+     * position.
+     * @param menu      The menu that a tooltip is requested for
+     * @param helpEvent The QEvent::ToolTip that was cast to a QHelpEvent
+     */
+    bool handleMenuToolTipEvent(QMenu *menu, QHelpEvent *helpEvent);
+
+    /**
+     * @param watchedWidget The widget that is receiving the QHelpEvent
+     * @param helpEvent     The QEvent::ToolTip that was cast to a QHelpEvent
+     * @return false if no special handling of the tooltip event seems necessary. true otherwise.
+     */
+    bool handleToolTipEvent(QWidget *watchedWidget, QHelpEvent *helpEvent);
+
+    /**
+     * Handles links being clicked in whatsThis.
+     * @return true.
+     */
+    bool handleWhatsThisClickedEvent(QEvent *event);
+
+    /** @see handleHideEvent()
+     * The name is slightly misleading because it will only post events for QMenus. */
+    void postToolTipEventIfCursorDidntMove() const;
+
+    /**
+     * Shows a tooltip that contains a whatsThisHint at the location \p globalPos.
+     * If \p tooltip is empty, only a whatsThisHint is shown.
+     *
+     * The parameter usage is identical to that of QToolTip::showText. The only difference
+     * is that this method doesn't need a QWidget *w parameter because that one is already
+     * retrieved in handleToolTipEvent() prior to calling this method.
+     *
+     * @see QToolTip::showText()
+     */
+    void showExpandableToolTip(const QPoint &globalPos,
+                               const QString &toolTip = QStringLiteral(),
+                               const QRect &rect = QRect());
+
+public:
+    KToolTipHelper *const q;
+
+private:
+    /** An action in a menu a tooltip was requested for. */
+    QPointer<QAction> m_action;
+    /** The global position where the last tooltip which had a whatsThisHint was displayed. */
+    QPoint m_lastExpandableToolTipGlobalPos;
+    /** The last widget a QEvent::tooltip was sent for. */
+    QPointer<QWidget> m_widget;
+
+    /** The global position of where the cursor was when the last QEvent::HideEvent for a
+     * menu occured. @see handleHideEvent() */
+    QPoint m_cursorGlobalPosWhenLastMenuHid;
+    /** Calls postToolTipEventIfCursorDidntMove().  @see handleHideEvent() */
+    QTimer m_toolTipTimeout;
+
+    static KToolTipHelper *s_instance;
+};
+
+/**
+ * All QActions have their iconText() as their toolTip() by default.
+ * This method checks if setToolTip() was called for the action explicitly to set a different/more
+ * useful tooltip.
+ *
+ * @return true if the toolTip() isn't just an automatically generated version of iconText().
+ *         false otherwise.
+ */
+bool hasExplicitToolTip(const QAction *action);
+
+#endif // KTOOLTIPHELPER_P_H
