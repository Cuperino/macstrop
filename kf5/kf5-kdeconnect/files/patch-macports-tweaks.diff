diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8e0909a0..9ea1f728 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -48,7 +48,10 @@ else()
     endif()
     find_package(Qca-qt5 ${QCA_MIN_VERSION} REQUIRED)
     if(NOT WIN32 AND NOT APPLE)
-        find_package(KF5PulseAudioQt REQUIRED)
+        find_package(KF5PulseAudioQt)
+        if(KF5PulseAudioQt_FOUND)
+            add_definitions(-DHAVE_PULSEQT)
+        endif()
     endif()
     add_definitions(-DQT_NO_URL_CAST_FROM_STRING -DQT_NO_KEYWORDS -DQT_NO_CAST_FROM_ASCII)
 endif()
@@ -73,7 +76,7 @@ set_package_properties(KF5Kirigami2 PROPERTIES
 )
 
 option(PRIVATE_DBUS_ENABLED "Use private dbus session for kdeconnect" OFF)
-if(PRIVATE_DBUS_ENABLED OR APPLE)
+if(PRIVATE_DBUS_ENABLED)
     add_compile_definitions(USE_PRIVATE_DBUS)
 endif()
 add_subdirectory(core)
diff --git a/plugins/CMakeLists.txt b/plugins/CMakeLists.txt
index 095670d4..f69ad63e 100644
--- a/plugins/CMakeLists.txt
+++ b/plugins/CMakeLists.txt
@@ -34,7 +34,7 @@ if(NOT SAILFISHOS)
         add_subdirectory(pausemusic)
     endif()
 
-    if(Qt5Multimedia_FOUND AND KF5PulseAudioQt_FOUND)
+    if(Qt5Multimedia_FOUND)
         add_subdirectory(findthisdevice)
     endif()
 endif()
diff --git a/plugins/findthisdevice/CMakeLists.txt b/plugins/findthisdevice/CMakeLists.txt
index f32602ad..9b218d65 100644
--- a/plugins/findthisdevice/CMakeLists.txt
+++ b/plugins/findthisdevice/CMakeLists.txt
@@ -13,7 +13,7 @@ target_link_libraries(kdeconnect_findthisdevice
     Qt5::DBus
 )
 
-if (NOT WIN32)
+if (KF5PulseAudioQt_FOUND)
     target_link_libraries(kdeconnect_findthisdevice
         KF5::PulseAudioQt
     )
diff --git a/plugins/findthisdevice/findthisdeviceplugin.cpp b/plugins/findthisdevice/findthisdeviceplugin.cpp
index 52952b6d..a89d049d 100644
--- a/plugins/findthisdevice/findthisdeviceplugin.cpp
+++ b/plugins/findthisdevice/findthisdeviceplugin.cpp
@@ -23,7 +23,7 @@
 // KF
 #include <KPluginFactory>
 
-#ifndef Q_OS_WIN
+#if !defined(Q_OS_WIN) && defined(HAVE_PULSEQT)
 #include <PulseAudioQt/Context>
 #include <PulseAudioQt/Sink>
 #endif
@@ -96,7 +96,7 @@ bool FindThisDevicePlugin::receivePacket(const NetworkPacket& np)
     player->setVolume(100);
     player->play();
 
-#ifndef Q_OS_WIN
+#if !defined(Q_OS_WIN) && defined(HAVE_PULSEQT)
     const auto sinks = PulseAudioQt::Context::instance()->sinks();
     QVector<PulseAudioQt::Sink*> mutedSinks;
 
diff --git a/plugins/pausemusic/CMakeLists.txt b/plugins/pausemusic/CMakeLists.txt
index af997637..58d94310 100644
--- a/plugins/pausemusic/CMakeLists.txt
+++ b/plugins/pausemusic/CMakeLists.txt
@@ -4,8 +4,12 @@ target_link_libraries(kdeconnect_pausemusic
     kdeconnectcore
     Qt5::Core
     Qt5::DBus
-    KF5::PulseAudioQt
 )
+if(KF5PulseAudioQt_FOUND)
+    target_link_libraries(kdeconnect_pausemusic
+	   KF5::PulseAudioQt
+    )
+endif()
 
 #######################################
 # Config
diff --git a/plugins/pausemusic/pausemusicplugin.cpp b/plugins/pausemusic/pausemusicplugin.cpp
index bd3fcd06..e382cd58 100644
--- a/plugins/pausemusic/pausemusicplugin.cpp
+++ b/plugins/pausemusic/pausemusicplugin.cpp
@@ -26,8 +26,10 @@
 #include <QDBusReply>
 
 #include <KPluginFactory>
+#ifdef HAVE_PULSEQT
 #include <PulseAudioQt/Context>
 #include <PulseAudioQt/Sink>
+#endif
 
 #include <dbushelper.h>
 
@@ -66,6 +68,7 @@ bool PauseMusicPlugin::receivePacket(const NetworkPacket& np)
 
         if (mute) {
             qCDebug(KDECONNECT_PLUGIN_PAUSEMUSIC) << "Muting system volume";
+#ifdef HAVE_PULSEQT
             const auto sinks = PulseAudioQt::Context::instance()->sinks();
             for (const auto sink : sinks) {
                 if (!sink->isMuted()) {
@@ -73,6 +76,7 @@ bool PauseMusicPlugin::receivePacket(const NetworkPacket& np)
                     mutedSinks.insert(sink->name());
                 }
             }
+#endif
         }
 
         if (pause) {
@@ -102,12 +106,14 @@ bool PauseMusicPlugin::receivePacket(const NetworkPacket& np)
 
             qCDebug(KDECONNECT_PLUGIN_PAUSEMUSIC) << "Unmuting system volume";
 
+#if HAVE_PULSEQT
             const auto sinks = PulseAudioQt::Context::instance()->sinks();
             for (const auto sink : sinks) {
                 if (mutedSinks.contains(sink->name())) {
                     sink->setMuted(false);
                 }
             }
+#endif
             mutedSinks.clear();
         }
 
diff --git a/plugins/systemvolume/CMakeLists.txt b/plugins/systemvolume/CMakeLists.txt
index cbbf1b37..dabfe230 100644
--- a/plugins/systemvolume/CMakeLists.txt
+++ b/plugins/systemvolume/CMakeLists.txt
@@ -30,6 +30,10 @@ else()
     target_link_libraries(kdeconnect_systemvolume
         kdeconnectcore
         Qt5::Core
-        KF5::PulseAudioQt
     )
+    if(KF5PulseAudioQt_FOUND)
+        target_link_libraries(kdeconnect_systemvolume
+            KF5::PulseAudioQt
+        )
+    endif()
 endif()
diff --git a/plugins/systemvolume/systemvolumeplugin-pulse.cpp b/plugins/systemvolume/systemvolumeplugin-pulse.cpp
index da4fb0a6..6774241f 100644
--- a/plugins/systemvolume/systemvolumeplugin-pulse.cpp
+++ b/plugins/systemvolume/systemvolumeplugin-pulse.cpp
@@ -31,8 +31,10 @@
 
 #include <core/device.h>
 
-#include <PulseAudioQt/Sink>
-#include <PulseAudioQt/Context>
+#ifdef HAVE_PULSEQT
+    #include <PulseAudioQt/Sink>
+    #include <PulseAudioQt/Context>
+#endif
 
 K_PLUGIN_CLASS_WITH_JSON(SystemvolumePlugin, "kdeconnect_systemvolume.json")
 
@@ -40,12 +42,15 @@ Q_LOGGING_CATEGORY(KDECONNECT_PLUGIN_SYSTEMVOLUME, "kdeconnect.plugin.systemvolu
 
 SystemvolumePlugin::SystemvolumePlugin(QObject* parent, const QVariantList& args)
     : KdeConnectPlugin(parent, args)
+#ifdef HAVE_PULSEQT
     , sinksMap()
+#endif
 {}
 
 bool SystemvolumePlugin::receivePacket(const NetworkPacket& np)
 {
 
+#ifdef HAVE_PULSEQT
     if (!PulseAudioQt::Context::instance()->isValid())
         return false;
 
@@ -65,6 +70,9 @@ bool SystemvolumePlugin::receivePacket(const NetworkPacket& np)
         }
     }
     return true;
+#else
+    return false;
+#endif
 }
 
 void SystemvolumePlugin::sendSinkList() {
@@ -72,6 +80,7 @@ void SystemvolumePlugin::sendSinkList() {
     QJsonDocument document;
     QJsonArray array;
 
+#ifdef HAVE_PULSEQT
     sinksMap.clear();
 
     const auto sinks = PulseAudioQt::Context::instance()->sinks();
@@ -108,10 +117,12 @@ void SystemvolumePlugin::sendSinkList() {
     NetworkPacket np(PACKET_TYPE_SYSTEMVOLUME);
     np.set<QJsonDocument>(QStringLiteral("sinkList"), document);
     sendPacket(np);
+#endif
 }
 
 void SystemvolumePlugin::connected()
 {
+#ifdef HAVE_PULSEQT
     connect(PulseAudioQt::Context::instance(), &PulseAudioQt::Context::sinkAdded, this, [this] {
         sendSinkList();
     });
@@ -124,6 +135,7 @@ void SystemvolumePlugin::connected()
     for (PulseAudioQt::Sink* sink : sinks) {
         sinksMap.insert(sink->name(), sink);
     }
+#endif
 }
 
 #include "systemvolumeplugin-pulse.moc"
diff --git a/plugins/systemvolume/systemvolumeplugin-pulse.h b/plugins/systemvolume/systemvolumeplugin-pulse.h
index f362fb08..b4a383da 100644
--- a/plugins/systemvolume/systemvolumeplugin-pulse.h
+++ b/plugins/systemvolume/systemvolumeplugin-pulse.h
@@ -26,7 +26,9 @@
 
 #include <core/kdeconnectplugin.h>
 
-#include <PulseAudioQt/Sink>
+#ifdef HAVE_PULSEQT
+    #include <PulseAudioQt/Sink>
+#endif
 
 #define PACKET_TYPE_SYSTEMVOLUME QStringLiteral("kdeconnect.systemvolume")
 #define PACKET_TYPE_SYSTEMVOLUME_REQUEST QStringLiteral("kdeconnect.systemvolume.request")
@@ -45,7 +47,9 @@ public:
 
 private:
     void sendSinkList();
+#ifdef HAVE_PULSEQT
     QMap<QString, PulseAudioQt::Sink*> sinksMap;
+#endif
 };
 
 #endif
diff --git a/indicator/CMakeLists.txt b/indicator/CMakeLists.txt
index f2b889b5a03ac265ff5ce19f9b45192a73ae4fd6..93fa37619534cf790fccd803a2f98b7c9ae0ef8e 100644
--- a/indicator/CMakeLists.txt
+++ b/indicator/CMakeLists.txt
@@ -5,6 +5,7 @@ set(indicator_SRCS
 
 include(ECMAddAppIcon)
 ecm_add_app_icon(indicator_SRCS ICONS
+    ../icon/sc-apps-kdeconnectindicator.svg
     ../icon/16-apps-kdeconnect.png
     ../icon/22-apps-kdeconnect.png
     ../icon/32-apps-kdeconnect.png
diff --git a/indicator/main.cpp b/indicator/main.cpp
index 5cef0a78d0e9be40f8216e799bb75db6c58ee737..65007f5b7b4565ec15e1384dfebb280fea19d52b 100644
--- a/indicator/main.cpp
+++ b/indicator/main.cpp
@@ -61,6 +61,7 @@ int main(int argc, char** argv)
     kdeconnectd.start(QStringLiteral("kdeconnectd.exe"));
 #endif
 
+#ifdef USE_PRIVATE_DBUS
 #ifdef Q_OS_MAC
     // Unset launchctl env, avoid block
     DbusHelper::macosUnsetLaunchctlEnv();
@@ -105,6 +106,7 @@ int main(int argc, char** argv)
             retry++;
         }
     } while(true);
+#endif
 #endif
 
     KDBusService dbusService(KDBusService::Unique);
@@ -160,9 +162,9 @@ int main(int argc, char** argv)
     QObject::connect(&model, &DevicesModel::rowsRemoved, &model, refreshMenu);
 
 #ifdef Q_OS_MAC
-    QStringList themeSearchPaths = QIcon::themeSearchPaths();
-    themeSearchPaths << basePath + QStringLiteral("Contents/Resources/icons/");
-    QIcon::setThemeSearchPaths(themeSearchPaths);
+//     QStringList themeSearchPaths = QIcon::themeSearchPaths();
+//     themeSearchPaths << basePath + QStringLiteral("Contents/Resources/icons/");
+//     QIcon::setThemeSearchPaths(themeSearchPaths);
 #endif
 
 #ifdef QSYSTRAY
diff --git a/daemon/CMakeLists.txt b/daemon/CMakeLists.txt
index 5d81ef3b6669a1b209c289aaccca0535c51ef558..7606060c475f4d35c4f0ce200da80bd753aa35d9 100644
--- a/daemon/CMakeLists.txt
+++ b/daemon/CMakeLists.txt
@@ -3,6 +3,9 @@ add_definitions(-DTRANSLATION_DOMAIN="kdeconnect-kded")
 add_executable(kdeconnectd kdeconnectd.cpp)
 target_include_directories(kdeconnectd PUBLIC ${CMAKE_BINARY_DIR})
 target_link_libraries(kdeconnectd kdeconnectcore KF5::KIOWidgets KF5::DBusAddons KF5::Notifications KF5::I18n Qt5::Widgets)
+if(APPLE)
+    target_link_libraries(kdeconnectd "-framework CoreFoundation")
+endif()
 
 ecm_mark_nongui_executable(kdeconnectd)
 
diff --git a/daemon/kdeconnectd.cpp b/daemon/kdeconnectd.cpp
index 69dca97447179502032b4cbf5e48161e8c33acd4..013c5d11d098b8b849729e20f7ff727cd96c702f 100644
--- a/daemon/kdeconnectd.cpp
+++ b/daemon/kdeconnectd.cpp
@@ -40,6 +40,10 @@
 #include "core/backends/pairinghandler.h"
 #include "kdeconnect-version.h"
 
+#ifdef Q_OS_OSX
+#include <CoreFoundation/CoreFoundation.h>
+#endif
+
 Q_DECLARE_LOGGING_CATEGORY(KDECONNECT_DAEMON)
 Q_LOGGING_CATEGORY(KDECONNECT_DAEMON, "kdeconnect.daemon")
 
@@ -125,6 +129,24 @@ static void detectPlatform(int argc, char **argv)
 
 int main(int argc, char* argv[])
 {
+#ifdef Q_OS_OSX
+    CFBundleRef mainBundle = CFBundleGetMainBundle();
+    if (mainBundle) {
+        // get the application's Info Dictionary. For app bundles this would live in the bundle's Info.plist,
+        // for regular executables it is obtained in another way.
+        CFMutableDictionaryRef infoDict = (CFMutableDictionaryRef) CFBundleGetInfoDictionary(mainBundle);
+        if (infoDict) {
+            // Add or set the "LSUIElement" key with/to value "1". This can simply be a CFString.
+            CFDictionarySetValue(infoDict, CFSTR("LSUIElement"), CFSTR("1"));
+            // That's it. We're now considered as an "agent" by the window server, and thus will have
+            // neither menubar nor presence in the Dock or App Switcher.
+        } else {
+            qWarning() << "Couldn't get InfoDictionary";
+        }
+    } else {
+        qWarning() << "Couldn't get mainBundle";
+    }
+#endif
    detectPlatform(argc, argv);
 
     QApplication app(argc, argv);
diff --git a/kcm/CMakeLists.txt b/kcm/CMakeLists.txt
index 07cddc640e68bd3653ac9f58ac715329db42bf89..052ae875662375f9f46f6a4889e676b19e6c64e9 100644
--- a/kcm/CMakeLists.txt
+++ b/kcm/CMakeLists.txt
@@ -10,6 +10,18 @@ set(kcm_SRCS
 )
 
 set(kcm_wrapper_SRCS main.cpp)
+include(ECMAddAppIcon)
+ecm_add_app_icon(kcm_wrapper_SRCS ICONS
+    ../icon/sc-apps-kdeconnect.svgz
+    ../icon/16-apps-kdeconnect.png
+    ../icon/22-apps-kdeconnect.png
+    ../icon/32-apps-kdeconnect.png
+    ../icon/48-apps-kdeconnect.png
+    ../icon/64-apps-kdeconnect.png
+    ../icon/128-apps-kdeconnect.png
+    ../icon/256-apps-kdeconnect.png
+)
+
 add_executable(kdeconnect-settings ${kcm_wrapper_SRCS})
 target_link_libraries(kdeconnect-settings KF5::I18n KF5::KCMUtils)
 
diff --git a/urlhandler/CMakeLists.txt b/urlhandler/CMakeLists.txt
index df9707007344b2d43a46d8ce50f1407259a20563..958bb89272d94cdc3453ae5b37cbb5485f7356a3 100644
--- a/urlhandler/CMakeLists.txt
+++ b/urlhandler/CMakeLists.txt
@@ -1,6 +1,7 @@
 ki18n_wrap_ui(telhandler_SRCS dialog.ui)
 
 add_executable(kdeconnect-handler kdeconnect-handler.cpp ${telhandler_SRCS})
+ecm_mark_nongui_executable(kdeconnect-handler)
 
 target_include_directories(kdeconnect-handler PUBLIC ${CMAKE_BINARY_DIR})
 
