diff --git src/kitemviews/private/kbaloorolesprovider.cpp src/kitemviews/private/kbaloorolesprovider.cpp
index f3671540dd89c4e6d49fbfdfe18404d978d44c4b..575284ac98f256a32ddd2e929fc994e762690ead 100644
--- src/kitemviews/private/kbaloorolesprovider.cpp
+++ src/kitemviews/private/kbaloorolesprovider.cpp
@@ -30,6 +30,40 @@
 #include <QDebug>
 #include <QTime>
 
+#if QT_VERSION < QT_VERSION_CHECK(5, 10, 0)
+// Qt 5.10 QKeyValueIterator from qiterator.h
+template<typename Key, typename T, class Iterator>
+class QKeyValueIterator
+{
+public:
+    typedef typename Iterator::iterator_category iterator_category;
+    typedef typename Iterator::difference_type difference_type;
+    typedef std::pair<Key, T> value_type;
+    typedef const value_type *pointer;
+    typedef const value_type &reference;
+
+    QKeyValueIterator() = default;
+    Q_DECL_CONSTEXPR explicit QKeyValueIterator(Iterator o) Q_DECL_NOEXCEPT_EXPR(std::is_nothrow_move_constructible<Iterator>::value)
+        : i(std::move(o)) {}
+
+    std::pair<Key, T> operator*() const {
+        return std::pair<Key, T>(i.key(), i.value());
+    }
+
+    friend Q_DECL_CONSTEXPR bool operator==(QKeyValueIterator lhs, QKeyValueIterator rhs) Q_DECL_NOEXCEPT { return lhs.i == rhs.i; }
+    friend Q_DECL_CONSTEXPR bool operator!=(QKeyValueIterator lhs, QKeyValueIterator rhs) Q_DECL_NOEXCEPT { return lhs.i != rhs.i; }
+
+    inline QKeyValueIterator &operator++() { ++i; return *this; }
+    inline QKeyValueIterator operator++(int) { return QKeyValueIterator(i++);}
+    inline QKeyValueIterator &operator--() { --i; return *this; }
+    inline QKeyValueIterator operator--(int) { return QKeyValueIterator(i--); }
+    Iterator base() const { return i; }
+
+private:
+    Iterator i;
+};
+#endif
+
 struct KBalooRolesProviderSingleton
 {
     KBalooRolesProvider instance;
@@ -59,14 +93,24 @@ QHash<QByteArray, QVariant> KBalooRolesProvider::roleValues(const Baloo::File& f
     using entry = std::pair<const KFileMetaData::Property::Property&, const QVariant&>;
 
     const auto& propMap = file.properties();
-    auto rangeBegin = propMap.constKeyValueBegin();
-
-    while (rangeBegin != propMap.constKeyValueEnd()) {
+#if QT_VERSION < QT_VERSION_CHECK(5, 10, 0)
+    // extracted from the Qt 5.10 QMap class definition
+    using const_key_value_iterator = QKeyValueIterator<const KFileMetaData::Property::Property&, const QVariant&, KFileMetaData::PropertyMap::const_iterator>;
+    // based on QMap::constKeyValue*() from Qt 5.10
+    #define constKeyValueBegin(map) const_key_value_iterator(map.begin())
+    #define constKeyValueEnd(map)   const_key_value_iterator(map.end())
+#else
+    #define constKeyValueBegin(map) map.constKeyValueBegin()
+    #define constKeyValueEnd(map)   map.constKeyValueEnd()
+#endif
+    auto rangeBegin = constKeyValueBegin(propMap);
+
+    while (rangeBegin != constKeyValueEnd(propMap)) {
         auto key = (*rangeBegin).first;
         const KFileMetaData::PropertyInfo propertyInfo(key);
         const QByteArray role = roleForProperty(propertyInfo.name());
 
-        auto rangeEnd = std::find_if(rangeBegin, propMap.constKeyValueEnd(),
+        auto rangeEnd = std::find_if(rangeBegin, constKeyValueEnd(propMap),
             [key](const entry& e) { return e.first != key; });
 
         if (role.isEmpty() || !roles.contains(role)) {
