PortSystem      1.0
PortGroup       code_sign 1.0
PortGroup       compress_workdir 1.0
# PortGroup       conflicts_build 1.0
PortGroup       perl5 1.0
PortGroup       legacysupport 1.1

# for AT_REMOVEDIR and family:
legacysupport.newest_darwin_requires_legacy 13

# Many thanks to https://medium.com/@mattmatic/compiling-samba-4-on-mac-os-x-high-sierra-24ca6a93a51c
# for showing which Samba4 version still builds on Mac, and how to do it.

name            samba4
version         4.13.0
categories      net
platforms       darwin
maintainers     openmaintainer
license         GPL-3
description     SMB/CIFS server and client
long_description \
                Samba is the standard Windows interoperability suite of programs for Linux and Unix. \
                This is version ${version} which is API compatible with the version from port:samba3.

homepage        http://www.samba.org/
master_sites    https://download.samba.org/pub/samba/stable
distname        samba-${version}
checksums       rmd160  0e0efa2be30af3df3cce92b00496b296cc4c2a0d \
                sha256  f11d52aee8db0aa50ac614143f2ccefead29e8f8ff585358792221557cade7f6
#                 size    18406380
if {${os.platform} eq "darwin" && ${os.major} <= 13} {
    depends_fetch port:wget
    fetch {
        # `fetch.ignore_sslcert yes` doesn't suffice here, so we use wget
        if {![file exists ${distpath}/${distname}${extract.suffix}]} {
            system "wget ${master_sites}/${distname}${extract.suffix} --no-check-certificate --progress=bar:force -O ${distpath}/${distname}${extract.suffix}"
        }
    }
}

depends_build   port:perl5 \
                port:p5-parse-yapp

depends_lib     port:gnutls \
                port:readline \
                port:libarchive \
                port:openldap \
                port:libiconv \
                port:zlib \
                port:gettext \
                port:gpgme

platform darwin {
    depends_build-append \
                port:cctools
    depends_lib-append \
                port:popt \
                port:jansson
#     conflicts_build-append \
#                 libxslt \
#                 docbook-xsl-nons \
#                 docbook-xsl-ns
}
## Extra host packages installed on Linux:
#   faketime gir1.2-tracker-0.16 libexempi3 libfaketime libiptcdata0
#   libjansson-dev libjansson4 libldb-dev libparse-yapp-perl libtalloc-dev
#   libtevent-dev libtracker-extract-0.16-0 libtracker-miner-0.16-0
#   libtracker-sparql-0.16-dev python-extras python-fixtures python-ldb-dev
#   python-mimeparse python-talloc-dev python-testtools

set pyversions  {3.6 3.7 3.8 3.9}
set PYTHON      {}

# declare variants
foreach p ${pyversions} {
    set pv [join [split ${p} .] ""]
    set confs {}
    foreach q ${pyversions} {
        if {${q} ne ${p}} {
            set confs [lappend confs "python[join [split ${q} .] ""]"]
        }
    }
    variant python${pv} conflicts {*}${confs} description {Build using and for Python ${p}} {}
    if {[variant_isset python${pv}]} {
        set pyset ${p}
    }
}
if {![info exists pyset]} {
    # pv contains the last element of ${pyversions} so we can use that to set a default:
    default_variants +python${pv}
}

# now check what variant is set and define it:
foreach p ${pyversions} {
    set pv [join [split ${p} .] ""]
    if {[variant_isset python${pv}]} {
        # python is a build dependency but also a runtime dependency
        depends_lib-append \
                port:python${pv}
        set PYTHON ${prefix}/bin/python${p}
    }
}

patch.pre_args  -Np1
platform darwin {
    patchfiles-append \
                patch-max_grp.diff \
                patch-fix-st_atim.diff

    # disable the doc building by changing the expected name of the crucial xsltproc utility.
    patchfiles-append \
                patch-no-xsltproc.diff

    post-patch {
        reinplace -W ${worksrcpath} "s|@PREFIX@|${prefix}|g" \
                release-scripts/build-docs \
                release-scripts/build-htmlman-git \
                release-scripts/build-htmlman-nogit \
                release-scripts/build-manpages-git \
                release-scripts/build-manpages-nogit
    }
    configure.ldflags-append -v
}

# inspired from Ubuntu's packaging (debian/rules):
configure.cmd   ${PYTHON} ./buildtools/bin/waf configure
configure.env-append\
                "YAPP=${prefix}/bin/yapp-${perl5.default_branch}" \
                "PYTHON=${PYTHON}"
build.cmd       ${PYTHON} ./buildtools/bin/waf -v
build.pre_args  build --destdir=${destroot}
destroot.cmd    ${PYTHON} ./buildtools/bin/waf -v
destroot.pre_args-append \
                --destdir=${destroot}
# the destroot phase relinks, so doing it in parallel should speed up things
# (NB: waf uses NCPU jobs by default, so this also makes it possible to do
# a purely serial build/destroot!)
destroot.post_args-append \
                -j ${build.jobs}
destroot.destdir

configure.args  -C \
                --enable-fhs \
                --mandir=${prefix}/share/man \
                --with-libiconv=${prefix} \
                --without-acl-support \
                --without-ad-dc \
                --disable-avahi \
                --with-gpgme \
                --disable-spotlight

variant concurrent description {Build for concurrent installation with port:samba3. Otherwise the port will use its normal install layout.} {}
if {![variant_isset concurrent]} {
    # the name of the lib/samba directory:
    set samba   "samba"
    conflicts   samba3
} else {
    set samba   ${name}
    configure.args-append \
                --libdir=${prefix}/lib/${samba} \
                --with-configdir=${prefix}/etc/${samba} \
                --bindir=${prefix}/${samba} \
                --sbindir=${prefix}/samba4
}

variant spotlight description "Enable Spotlight support" {
    configure.args-replace \
                --disable-spotlight \
                --enable-spotlight
    platform darwin {
        depends_lib-append \
                port:tracker
    }
}

variant avahi description "Enable Avahi support" {
    configure.args-replace \
                --disable-avahi \
                --enable-avahi
    platform darwin {
        depends_lib-append port:avahi
    }
}

variant kerberos description "Enable MIT Kerberos support" {
    configure.args-append \
                --with-system-mitkrb5
    platform darwin {
        depends_lib-append port:kerberos5
    }
}

platform linux {
    depends_build-append \
                port:patchelf
    configure.args-replace \
                --without-acl-support \
                --with-acl-support
    #configure.args-append \
                #--disable-python
    depends_lib-append \
                port:attr \
                port:acl \
                port:xz
    default_variants +avahi
    configure.ldflags-append \
                ${prefix}/lib/libintl.so
}

configure.post_args-append "|& tee -a ${workpath}/.macports.${subport}.configure.log'"
pre-configure {
    set cmd [join "${configure.cmd} ${configure.pre_args} ${configure.args}"]
        configure.pre_args-prepend "-cf '${configure.cmd} "
        configure.cmd "/bin/csh"
        ui_debug "configure command set to `${configure.cmd} ${configure.pre_args} ${configure.args} ${configure.post_args}`"
        system "echo '## ${cmd}' > ${workpath}/.macports.${subport}.configure.log"
}

build.post_args-append -k

proc mkpdir {path perms} {
    global destroot prefix
    xinstall -m ${perms} -d ${destroot}${prefix}/${path}
    destroot.keepdirs-append ${destroot}${prefix}/${path}
}

# this will be used on Darwin, to create a monster `install_name_tool -change old new`
# command that will correct the IDs of a binary's library dependencies so that they
# will be found in the location where they are actually installed.
# Thankfully, install_name_tool accepts any number of -change old new triplets and
# equally thankfully, it will simply ignore irrelevant ones.
options changelist
changelist

post-destroot {
    # install a file missed by the build system:
    platform darwin {
        xinstall -m 755 ${worksrcpath}/bin/shared/private/libdnsserver-common-samba4.dylib ${destroot}${prefix}/lib/${samba}
    }
    platform linux {
        xinstall -m 755 ${worksrcpath}/bin/shared/private/libdnsserver-common-samba4.so ${destroot}${prefix}/lib/${samba}
        # get the current required rpath from one of the library's dependencies (known to be complete)
        set rpath [exec patchelf --print-rpath ${destroot}${prefix}/lib/${samba}/libsamba-debug-samba4.so]
        # set the rpath
        foreach l {libcmdline-credentials-samba4.so libcmocka-samba4.so libmessages-util-samba4.so \
                libpopt-samba3-samba4.so libreplace-samba4.so libsamba-modules-samba4.so libsmbpasswdparser-samba4.so \
                libsocket-blocking-samba4.so libutil-reg-samba4.so libutil-setid-samba4.so libdnsserver-common-samba4.so \
                ../libsmbldap.so
        } {
            system "patchelf --set-rpath \"${rpath}\" ${destroot}${prefix}/lib/${samba}/${l}"
        }
        system "patchelf --add-needed ${prefix}/lib/liblzma.so.5 ${destroot}${prefix}/bin/smbclient"
        system "patchelf --add-needed ${prefix}/lib/samba/libtdb.so.1 ${destroot}${prefix}lib/libsmbclient.so.0"
        system "patchelf --add-needed ${prefix}/lib/samba/libtdb.so.1 ${destroot}${prefix}lib/libsmbconf.so.0"
    }

    # install all manpages
    foreach c {1 3 5 7 8} {
        xinstall -m 755 -d ${destroot}${prefix}/share/man/man${c}
        foreach m [glob -nocomplain -directory "${worksrcpath}/docs/manpages/" *.${c}] {
            if {![file exists ${destroot}${prefix}/share/man/man${c}/[file rootname ${m}]]} {
                xinstall ${m} ${destroot}${prefix}/share/man/man${c}/
            }
        }
    }

    file copy ${filespath}/smb.conf.sample.ubuntu ${destroot}${prefix}/etc/${samba}/smb.conf.sample
    reinplace "s|@PREFIX@|${prefix}|g" ${destroot}${prefix}/etc/${samba}/smb.conf.sample
    reinplace "s|@SAMBA@|${samba}|g" ${destroot}${prefix}/etc/${samba}/smb.conf.sample

    # prevent a conflict with the system mdfind Spotlight utility!
    file rename ${destroot}${prefix}/bin/mdfind ${destroot}${prefix}/bin/smbmdfind
    file rename ${destroot}${prefix}/share/man/man1/mdfind.1 ${destroot}${prefix}/share/man/man1/smbmdfind.1

    # create required runtime directories with the appropriate permissions
    mkpdir var/lib/${samba}/private 755
    mkpdir var/lib/${samba}/private/msg.sock 700
    mkpdir var/lib/${samba}/usershares 755
    mkpdir var/lib/${samba}/printers 755
    mkpdir var/cache/${samba} 755
    mkpdir var/run/${samba} 755
    mkpdir var/lock/${samba}/msg.lock 755
    mkpdir var/log/${samba} 755
    mkpdir var/spool/${samba} 1777

    platform darwin {
        # On Darwin the build system fails to set library install names AND uses absolute paths
        # into the build directory (-o ${build.dir}/path/to/libfoo.dylib). As a result, these
        # libraries will have their ID set to those paths, and dependents will expect them in that
        # location (think of it as hard-coded, library-specific rpaths).
        # We want to run without need for ${build.dir} so we need to fix the IDs and the "rpaths".
        proc canonical {lf} {
            set l [file normalize ${lf}]
            if {[file type ${l}] eq "link"} {
                set target [file readlink ${l}]
                if {[file pathtype ${target}] eq "relative"} {
                    return [file normalize [file join [file dirname ${l}] ${target}]]
                } else {
                    return [file normalize ${target}]
                }
            } else {
                return ${l}
            }
        }

        # First, find all .dylib files, record their current ID (in changelist) and correct it
        # so it corresponds with their install location. The changelist record takes the form
        # of a list of "-change oldLocation newLocation" triplets which can be fed into install_name_tool.
        ui_msg "--->  Fixing dylib IDs"
        array set libdone {}
        catch {exec -ignorestderr find ${destroot}${prefix} -regex {.*/lib[^.]*\.[0-9]\.dylib}} versioneddylibs err
        foreach lf ${versioneddylibs} {
            # we may get output from `find` that's not a file, so check
            if {[file exists ${lf}]} {
                set l [canonical ${lf}]
                if {[string first ${destroot} ${l}] < 0} {
                    # shouldn't happen but better safe than sorry
                    ui_warn "${lf} -> ${l} !"
                } else {
                    # NB: the install name is based on the symlink, not the target!
                    set id [exec otool -D ${lf} | tail -1]
                    # the new install name == ID: the full path minus ${destroot}.
                    set instname [string map [list ${destroot} ""] ${lf}]
                    if {${instname} ne ${id}} {
                        system "install_name_tool -id ${instname} ${l}"
                        # the current ID must be changed to the new one in all files that depend on it:
                        changelist-append -change ${id} ${instname}
                        # annoyingly some libraries will still their intermediate library ID
                        # and who knows if other binaries depend on those IDs
                        # Just change both...
                        if {[string last ".inst.dylib" ${id}] >= 0} {
                            set id2 "[file rootname [file rootname ${id}]].dylib"
                        } else {
                            set id2 "[file rootname ${id}].inst.dylib"
                        }
                        changelist-append -change ${id2} ${instname}
                    }
                    # mark the actual file we just processed as "done".
                    set libdone(${l}) yes
                }
            }
        }
        # idem for the unversioned libraries - by finding all and then ignoring those already processed.
        catch {exec -ignorestderr find ${destroot}${prefix} -name "*.dylib"} otherdylibs err
        foreach lf ${otherdylibs} {
            if {[file exists ${lf}]} {
                set l [canonical ${lf}]
                if {[string first ${destroot} ${l}] < 0} {
                    # shouldn't happen but better safe than sorry
                    ui_warn "${lf} -> ${l} !"
                } elseif {![info exists libdone(${l})]} {
                    set id [exec otool -D ${lf} | tail -1]
                    set instname [string map [list ${destroot} ""] ${lf}]
                    if {${instname} ne ${id}} {
                        system "install_name_tool -id ${instname} ${l}"
                        changelist-append -change ${id} ${instname}
                        if {[string last ".inst.dylib" ${id}] >= 0} {
                            set id2 "[file rootname [file rootname ${id}]].dylib"
                        } else {
                            set id2 "[file rootname ${id}].inst.dylib"
                        }
                        changelist-append -change ${id2} ${instname}
                    }
                } else {
                    ui_debug "Library ${l} has already been fixed"
                }
            }
        }
        ui_debug "Changelist:"
        ui_debug "${changelist}"
        ui_msg "--->  Updating all binaries with the new IDs"
        # reset libdone
        array unset libdone
        catch {exec -ignorestderr find ${destroot}${prefix} -name "*.dylib" -o -name "*.so"} alllibs err
        foreach lf ${alllibs} {
            if {[file exists ${lf}]} {
                set exe [canonical ${lf}]
                if {![info exists libdone(${exe})]} {
                    system "install_name_tool ${changelist} ${exe}"
                    set libdone(${exe}) yes
                }
            }
        }
        foreach exe [glob ${destroot}${prefix}/bin/*] {
            if {[file exists ${exe}]} {
                # catch because we could encounter scripts
                catch {system "install_name_tool ${changelist} ${exe}"}
            }
        }
        foreach exe [glob ${destroot}${prefix}/sbin/*] {
            if {[file exists ${exe}]} {
                # catch because we could encounter scripts
                catch {system "install_name_tool ${changelist} ${exe}"}
            }
        }
        foreach exe [glob ${destroot}${prefix}/libexec/samba/*] {
            if {[file exists ${exe}]} {
                # catch because we could encounter scripts
                catch {system "install_name_tool ${changelist} ${exe}"}
            }
        }
        # All done, "already"!

        codesign ${destroot}${prefix}/bin/smbclient -
        codesign ${destroot}${prefix}/bin/nmblookup -
        codesign ${destroot}${prefix}/sbin/smbd -
    }

    if {[variant_isset concurrent]} {
        set samba "samba3"
        xinstall -m 755 -d ${destroot}${prefix}/etc/${name}/
        xinstall -m 644 ${worksrcpath}/examples/smb.conf.default \
            ${destroot}${prefix}/etc/${name}/smb.conf.default
        system "touch ${destroot}${prefix}/etc/${name}/lmhosts.sample"

        foreach p [glob -directory ${destroot}${prefix}/lib/pkgconfig *.pc] {
            file rename ${p} ${destroot}${prefix}/lib/pkgconfig/${pc}4.pc
        }
    } else {
        set samba "samba"
        xinstall -m 755 -d ${destroot}${prefix}/etc/samba
        xinstall -m 644 ${worksrcpath}/examples/smb.conf.default \
            ${destroot}${prefix}/etc/samba/smb.conf.default
        system "touch ${destroot}${prefix}/etc/samba/lmhosts.sample"
        platform darwin {
            # install symlinks so that existing dependents continue to find their dependents
            xinstall -m 755 -d ${destroot}${prefix}/lib/samba3
            ln -s ../libnetapi.dylib ${destroot}${prefix}/lib/samba3/
            ln -s ../libnetapi.0.dylib ${destroot}${prefix}/lib/samba3/libnetapi.dylib.0
            ln -s ../libsmbclient.dylib ${destroot}${prefix}/lib/samba3
            ln -s ../libsmbclient.0.dylib ${destroot}${prefix}/lib/samba3/libsmbclient.dylib.0
        }
        foreach p [glob -directory ${destroot}${prefix}/lib/pkgconfig *.pc] {
            set pc [file rootname [file tail ${p}]]
            ln -s ${pc}.pc ${destroot}${prefix}/lib/pkgconfig/${pc}4.pc
        }
    }
    system "touch ${destroot}${prefix}/var/lib/samba/private/secrets.tdb.sample"
}

post-activate {
    if {![file exists ${prefix}/etc/${samba}/smb.conf]} {
        if {[file exists ${prefix}/etc/samba3/smb.conf]} {
            file copy ${prefix}/etc/samba3/smb.conf ${prefix}/etc/${samba}/smb.conf
            notes-append "The existing Samba3 smb.conf was copied to ${prefix}/etc/${samba}/smb.conf"
        } else {
            file copy ${prefix}/etc/${samba}/smb.conf.sample ${prefix}/etc/${samba}/smb.conf
            # TODO: check if the default sample conf file needs modification
            # will at least require the usual conversion to ${prefix}
            notes-append "A default smb.conf was installed as ${prefix}/etc/${samba}/smb.conf; modify as required (e.g. the workgroup setting)"
        }
    }
    notes-append "Add \"client min protocol = NT1\" to your smb.conf file if you need to connect to SMB1 servers (e.g. old TimeCapsules)"
}

livecheck.type  regex
livecheck.regex samba-(\[0-9a-z.\]+)\\.tar\\.gz

# kate: backspace-indents true; indent-pasted-text true; indent-width 4; keep-extra-spaces true; remove-trailing-spaces modified; replace-tabs true; replace-tabs-save true; syntax Tcl/Tk; tab-indents true; tab-width 4;
